<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Mon, 03 Feb 2025 13:40:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Android修改：系统强调色/系统主题色/基本颜色]]></title>
            <guid>38b3b223b84b4b9cbacf835bdcf9a356</guid>
            <pubDate>Sun, 02 Feb 2025 09:22:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>莫名地系统强调色被重置为了默认的蓝色，蓝光伤眼，所以折腾了一下修改过程。<br />
<strong>在AOSP或者其他一些系统中，可以在设置中直接搜索：强调色（在<code>开启开发者选项</code>中）/基本颜色（在<code>壁纸和样式</code>中）</strong><br />
但是由于小米的MIUI/HyperOS屏蔽了相关的设置入口，所以，设置中是无法搜索到相关设置的（我记得MIUI的有几个开发版的开发者选项中是有强调色设置的，最新的Hyper OS已经没了）</p>
<ul>
<li>首先想到的是通过<code>startActivity</code>去启动包含强调色设置的设置页面（众所周知，小米在刚开始的时候，虽然使用了MIUI专属的com.android.settings应用，但是，其中还是有很多AOSP的设置的页面的，于是就有了通过<code>startActivity</code>来启动对应页面的方案），未果（应该是相关页面的Activity类彻底删掉了）</li>
<li>既然无法启动对应的页面来直接设置，那就只有直接修改设置项了，所以，先简单搜索了一下：<div><pre class="hljs"><code>settings list secure</code></pre></div>
</li>
<li>无奈设置项太多，所以Google搜索一番，由于关键词比较模糊，而且，和应用开发时的主题色很容易匹配到，只能搜索了一下XDA，倒是有个相似的问题：<a title="https://xdaforums.com/t/cant-change-back-the-accent-color-after-updating.4251477/" href="https://xdaforums.com/t/cant-change-back-the-accent-color-after-updating.4251477/">https://xdaforums.com/t/cant-change-back-the-accent-color-after-updating.4251477/</a>
<ul>
<li>主要操作是：<code>adb shell cmd overlay enable com.android.theme.color.${color}</code>，其中的<code>${color}</code>支持：<code>black, green, cinnamon, orchid, purple, space, and ocean</code>，由于不存在这个组件，未果</li>
</ul>
<div><pre class="hljs"><code>yaocf@yaochunfeng ~ % adb shell cmd overlay <span class="hljs-built_in">enable</span> com.android.theme.color.cinnamon

Exception occurred <span class="hljs-keyword">while</span> executing <span class="hljs-string">'enable'</span>:
java.lang.SecurityException: commit failed
    at com.android.server.om.OverlayManagerService<span class="hljs-variable">$1</span>.commit(OverlayManagerService.java:960)
    at com.android.server.om.OverlayManagerShellCommand.runEnableDisable(OverlayManagerShellCommand.java:251)
    at com.android.server.om.OverlayManagerShellCommand.onCommand(OverlayManagerShellCommand.java:89)
    at com.android.modules.utils.BasicShellCommandHandler.exec(BasicShellCommandHandler.java:97)
    at android.os.ShellCommand.exec(ShellCommand.java:38)
    at com.android.server.om.OverlayManagerService<span class="hljs-variable">$1</span>.onShellCommand(OverlayManagerService.java:1081)
    at android.os.Binder.shellCommand(Binder.java:1237)
    at android.os.Binder.onTransact(Binder.java:1050)
    at android.content.om.IOverlayManager<span class="hljs-variable">$Stub</span>.onTransact(IOverlayManager.java:510)
    at android.os.Binder.execTransactInternal(Binder.java:1512)
    at android.os.Binder.execTransact(Binder.java:1451)</code></pre></div>
</li>
<li>还有另一个帖子，给的方案是：<div><pre class="hljs"><code><span class="hljs-comment"># 设置强调色</span>
adb shell settings put secure theme_customization_overlay_picked_color_primary <span class="hljs-string">"#FFC709"</span>
adb shell settings put secure theme_customization_overlay_picked_color_accent <span class="hljs-string">"#FFC709"</span>

<span class="hljs-comment"># 删除设置</span>
adb shell settings delete secure theme_customization_overlay_picked_color_primary
adb shell settings delete secure theme_customization_overlay_picked_color_accent
</code></pre></div>
<ul>
<li>其中的<code>color_primary</code>和<code>color_accent</code>，Android开发一定都不陌生，可惜，这个方法也过时了，未果</li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>突然想起来，默认的主题色是跟着壁纸走的（动态颜色，系统默认会使用用户设置的壁纸或者锁屏图案通过算法运算得到一个颜色值作为主题色，应该是从Android 12开始的）。并且，由于在AOSP中，这个强调色的设置是在系统设置中的，也就是在settings表中，所以，还是来搜索settings表，增加了一些过滤条件：<div><pre class="hljs"><code>adb shell settings list secure |grep wallpaper |grep color</code></pre></div>
<ul>
<li>得到如下结果：</li>
</ul>
<div><pre class="hljs"><code>theme_customization_overlay_packages={"android.theme.customization.color_both":"0","android.theme.customization.color_source":"lock_wallpaper","_applied_timestamp":1738487984972}</code></pre></div>
<ul>
<li>看来是找到了，接下来就是看字段含义，搜索到了开发者页面：<a title="https://source.android.com/docs/core/display/dynamic-color?hl=zh-cn" href="https://source.android.com/docs/core/display/dynamic-color?hl=zh-cn">https://source.android.com/docs/core/display/dynamic-color?hl=zh-cn</a></li>
<li>这里简单列一下<code>theme_customization_overlay_packages</code>支持的相关参数：</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">key</th>
<th style="text-align:center">desc</th>
<th style="text-align:center">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">android.theme.customization.color_index</td>
<td style="text-align:center">颜色索引</td>
<td style="text-align:center">0~n</td>
</tr>
<tr>
<td style="text-align:center">android.theme.customization.system_palette</td>
<td style="text-align:center">系统调色盘</td>
<td style="text-align:center">color</td>
</tr>
<tr>
<td style="text-align:center">android.theme.customization.accent_color</td>
<td style="text-align:center">强调色</td>
<td style="text-align:center">color</td>
</tr>
<tr>
<td style="text-align:center">android.theme.customization.color_source</td>
<td style="text-align:center">颜色来源：从壁纸提取颜色还是手动指定（基本颜色）</td>
<td style="text-align:center">present/home_wallpaper/lock_wallpaper</td>
</tr>
<tr>
<td style="text-align:center">android.theme.customization.color_both</td>
<td style="text-align:center">当前壁纸设置类型</td>
<td style="text-align:center">1：锁屏和主屏幕，0：只设置其中一项</td>
</tr>
</tbody>
</table>
<ul>
<li>所以，最终的代码为（其中的<code>FFC709</code>是我常用的护眼色，改成你自己的就好）：<div><pre class="hljs"><code><span class="hljs-comment"># 切换到adb</span>
adb shell
<span class="hljs-comment"># 修改设置</span>
settings put secure theme_customization_overlay_packages <span class="hljs-string">'{"android.theme.customization.color_source":"preset","android.theme.customization.system_palette":"FFC709","android.theme.customization.accent_color":"FFC709"}'</span>
<span class="hljs-comment"># 或者，也可以只添加系统调色盘（也就是设置一个默认颜色，比如我遇到的这种情况。相当于系统没有从壁纸提取到颜色时，使用的默认值）</span>
settings put secure theme_customization_overlay_packages <span class="hljs-string">'{"android.theme.customization.color_both":"0","android.theme.customization.color_source":"home_wallpaper","android.theme.customization.system_palette":"FFC709"}'</span></code></pre></div>
</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Linux下的loop块设备命令记录]]></title>
            <guid>dc0a82d26fe74105a1bd0ee516358778</guid>
            <pubDate>Thu, 23 Jan 2025 10:34:37 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="创建-格式化并挂载">创建、格式化并挂载</h2>
<div><pre class="hljs"><code><span class="hljs-comment"># 申请文件（不占用实际磁盘空间）</span>
truncate -s 256G /app/imgs/share_disk
<span class="hljs-comment"># 格式化成ext4</span>
mkfs.ext4 /app/imgs/share_disk
<span class="hljs-comment"># 或者格式化成ntfs（注意-f，使用快速格式化，否则，默认的格式化会导致块设备文件占用完整的实际磁盘空间）</span>
mkfs.ntfs -F -f /app/imgs/share_disk

<span class="hljs-comment"># 创建挂载点</span>
mkdir /mnt/share_disk
<span class="hljs-comment"># 为了避免空目录被清理，可以创建一个占位文件</span>
<span class="hljs-comment"># touch /mnt/share_disk/.keep</span>

<span class="hljs-comment"># 直接通过mount挂载</span>
mount -o loop /app/imgs/share_disk /mnt/share_disk

<span class="hljs-comment"># 对于ntfs-3g，也可以直接使用mount.ntfs-3g直接挂载块设备</span>
mount.ntfs-3g /app/imgs/share_disk /mnt/share_disk</code></pre></div>
<div><pre class="hljs"><code><span class="hljs-comment"># 可以通过lsblk查看挂载详情</span>
root@OpenWrt:~<span class="hljs-comment"># lsblk </span>
<span class="hljs-comment"># NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span>
<span class="hljs-comment"># loop0           7:0    0 320.6M  0 loop /overlay</span>
<span class="hljs-comment"># loop1           7:1    0   217G  0 loop /mnt/share_disk</span>
<span class="hljs-comment"># nvme0n1       259:0    0   1.8T  0 disk </span>
<span class="hljs-comment"># ├─nvme0n1p1   259:1    0    50M  0 part </span>
<span class="hljs-comment"># ├─nvme0n1p2   259:2    0   500M  0 part /rom</span>
<span class="hljs-comment"># ├─nvme0n1p3   259:3    0   500M  0 part </span>
<span class="hljs-comment"># ├─nvme0n1p4   259:4    0   1.8T  0 part /app/docker</span>
<span class="hljs-comment"># │                                       /app</span>
<span class="hljs-comment"># └─nvme0n1p128 259:5    0   239K  0 part </span></code></pre></div>
<h2 id="loop块设备的大小调整">loop块设备的大小调整</h2>
<div><pre class="hljs"><code><span class="hljs-comment"># 可以先将之前的挂在remount,ro挂载成只读，或者umount也行</span>
<span class="hljs-comment"># 给块设备对应的文件添加10G大小（不会增加实际磁盘空间占用大小的）</span>
truncate -s +10G /app/imgs/share_disk

<span class="hljs-comment"># 触发一次系统针对loop1的分区扫描（相当于通知了系统，物理硬盘大小变了）</span>
partprobe -s /dev/loop1
<span class="hljs-comment"># 调整loop1的块设备大小到实际大小（相当于通知了loop驱动，硬盘大小变了，让loop驱动可以识别出新的大小）</span>
losetup -c /dev/loop1

<span class="hljs-comment"># 磁盘错误扫描（resize2fs的必须项）</span>
fdisk -l /dev/loop1

<span class="hljs-comment"># 调整文件系统大小</span>
resize2fs /dev/loop1

<span class="hljs-comment"># 检查结果</span>
root@OpenWrt:~<span class="hljs-comment"># df -h /dev/loop1</span>
<span class="hljs-comment"># Filesystem                Size      Used Available Use% Mounted on</span>
<span class="hljs-comment"># /dev/loop1              212.5G     76.5G    125.3G  38% /mnt/share_disk</span>
</code></pre></div>
<h3 id="手动使用loop的losetup挂载ntfs镜像文件">手动使用loop的losetup挂载NTFS镜像文件</h3>
<div><pre class="hljs"><code><span class="hljs-comment">#获取可用的loop设备号</span>
losetup -f
<span class="hljs-comment">#将share_disk关联到可用的loop设备号</span>
<span class="hljs-built_in">export</span> _loopPath=<span class="hljs-string">"<span class="hljs-subst">$(losetup -f)</span>"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">${_loopPath}</span>"</span>
losetup <span class="hljs-string">"<span class="hljs-variable">${_loopPath}</span>"</span> /app/imgs/share_disk

<span class="hljs-comment">#挂载</span>
mount <span class="hljs-string">"<span class="hljs-variable">${_loopPath}</span>"</span> /mnt/ap
</code></pre></div>
<h3 id="缩减loop设备对应的文件大小">缩减loop设备对应的文件大小</h3>
<div><pre class="hljs"><code><span class="hljs-comment">#opkg install fstrim</span>
<span class="hljs-comment">#注意：fstrim针对的是挂载点（目录），并且，无法处理直接挂载的ntfs，只能处理通过loop块设备挂载的ntfs</span>
fstrim /mnt/ap</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[学习Lua中遇到的一些问题]]></title>
            <guid>a8367ad713cb49d98b79c9463f7bbdbb</guid>
            <pubDate>Sat, 11 Jan 2025 11:44:22 GMT</pubDate>
            <content:encoded><![CDATA[<p>问题：Openwrt编译时，如果启用了lua-restry，启动后，<code>nginx -t</code>是正常的，但是nginx会启动失败</p>
<div><pre class="hljs"><code>root@J4125:~# nginx
2025/01/11 19:43:02 [alert] 20604#0: failed to load the 'resty.core' module (https://github.com/openresty/lua-resty-core); ensure you are using an OpenResty release from https://openresty.org/en/download.html (reason: module 'resty.core' not found:
    no field package.preload['resty.core']
    no file './resty/core.lua'
    no file '/app/openwrt-24.10.0-rc5/build_dir/target-x86_64_musl/luajit2-2.1.2024.08.15/ipkg-install/usr/share/luajit-2.1/resty/core.lua'
    no file '/usr/share/lua/resty/core.lua'
    no file '/usr/share/lua/resty/core/init.lua'
    no file '/usr/share/lua/resty/core.lua'
    no file '/usr/share/lua/resty/core/init.lua'
    no file './resty/core.so'
    no file '/usr/lib/lua/resty/core.so'
    no file '/usr/lib/lua/resty/core.so'
    no file '/usr/lib/lua/loadall.so'
    no file './resty.so'
    no file '/usr/lib/lua/resty.so'
    no file '/usr/lib/lua/resty.so'
    no file '/usr/lib/lua/loadall.so') in /etc/nginx/nginx.conf:242</code></pre></div>
<p>注意上面报错信息中的<code>no file</code> ，就是<code>package.path</code>。<br />
也可以通过打印显示默认<code>package.path</code></p>
<div><pre class="hljs"><code><span class="hljs-comment"># 进入lua命令交互模式</span>
lua
<span class="hljs-comment"># 打印目前的package.path</span>
<span class="hljs-built_in">print</span>(package.path)</code></pre></div>
<p>另外，<code>nginx</code>支持在<code>http</code>作用域内指定<code>lua_package_path "./?.lua;/usr/share/lua/?.lua;/usr/share/lua/?/init.lua;/usr/lib/lua/?.lua;/usr/lib/lua/?/init.lua";</code></p>
<p>综上：Openwrt上的nginx解决方案：就是创建软链接，让lua可以在 /usr/lib/lua里面找到它要的restry库：</p>
<div><pre class="hljs"><code>ln -s /usr/lib/lua /usr/share/lua</code></pre></div>
<p>或者，修改nginx的lua-path，让lua去对的地方找库：</p>
<div><pre class="hljs"><code>http {
    <span class="hljs-string">...</span>
    lua_package_path <span class="hljs-string">"./?.lua;/usr/lib/lua/?.lua;/usr/share/lua/?.lua;/usr/share/lua/?/init.lua;/usr/lib/lua/?/init.lua"</span>;
    <span class="hljs-string">...</span>
}</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[个人简历]]></title>
            <guid>efafeec0b99046aeaabc2556dc0da8d8</guid>
            <pubDate>Sun, 22 Dec 2024 10:10:04 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="姚春锋">姚春锋</h3>
<ul>
<li><strong>概况</strong>：男 | 1996年7月  |  本科 -计算机科学与技术 | 未婚 | 177 cm | 2017年开始工作</li>
<li><strong>个人主页</strong>：<a title="https://github.com/chunfengyao" href="https://github.com/chunfengyao">https://github.com/chunfengyao</a> | <strong>博客</strong>：<a title="https://blog.yaocf.eu.org" href="https://blog.yaocf.eu.org">https://blog.yaocf.eu.org</a></li>
<li><strong>邮箱</strong>：<a title="mailto:jobs@yaocf.eu.org?subject=%E6%9D%A5%E8%87%AA%E4%BD%A0%E7%9A%84%E7%AE%80%E5%8E%86&amp;body=%3C%E8%AF%B7%E5%85%88%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%8B%E6%9D%A5%E4%BF%A1%E6%96%B9%E4%BF%A1%E6%81%AF%EF%BC%8C%E8%B0%A2%E8%B0%A2%E3%80%82%3E" href="mailto:jobs@yaocf.eu.org?subject=%E6%9D%A5%E8%87%AA%E4%BD%A0%E7%9A%84%E7%AE%80%E5%8E%86&amp;body=%3C%E8%AF%B7%E5%85%88%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E%E4%B8%80%E4%B8%8B%E6%9D%A5%E4%BF%A1%E6%96%B9%E4%BF%A1%E6%81%AF%EF%BC%8C%E8%B0%A2%E8%B0%A2%E3%80%82%3E"><code>jobs@yaocf.eu.org</code></a> | <strong>地址</strong>：上海</li>
<li><strong>目前/上家单位</strong>：帆书（原：樊登读书）| <strong>行业</strong>：互联网/教育 | <strong>职位</strong>：高级Android/Flutter工程师</li>
</ul>
<h2 id="自我评价">自我评价</h2>
<p><strong><center class="jop-noMdConv">我的简历可能不是最好的，但我有足够强大的解决问题的能力（包括对问题原因的精准定位、以及问题解决方案的规划和动手能力），所以才能一步步走到现在的岗位。</center></strong></p>
<h2 id="求职意向">求职意向</h2>
<ul>
<li><strong>目标职能</strong>：Android工程师/Flutter工程师/项目组长 | <strong>目标地点</strong>：上海、南京</li>
</ul>
<h2 id="开源项目经历">开源项目经历</h2>
<h5 id="音乐播放器-httpsgithubcomrremixaplayer">音乐播放器 - <a title="https://github.com/rRemix/APlayer" href="https://github.com/rRemix/APlayer">https://github.com/rRemix/APlayer</a></h5>
<p>重构原先的页面生命周期管理模块，修复MediaPlayer在特殊场景下的奔溃问题。</p>
<h5 id="跨平台应用框架-httpsgithubcomflutterflutter">跨平台应用框架 - <a title="https://github.com/flutter/flutter" href="https://github.com/flutter/flutter">https://github.com/flutter/flutter</a></h5>
<p>修复Flutter当以模块化集成时，在Jenkins上进行大规模并行构建时的资源冲突问题。修复了并行构建时，线程死锁导致的构建失败。</p>
<h5 id="高性能私有化消息推送平台-httpsgithubcomgotifyandroid">高性能私有化消息推送平台 - <a title="https://github.com/gotify/android" href="https://github.com/gotify/android">https://github.com/gotify/android</a></h5>
<p>替换原先在网络断开时Websocket的重连流程。添加针对网络状态的监听进一步优化重连机制。UI上的一些小优化。</p>
<h2 id="工作经验">工作经验</h2>
<h3 id="202405-2024-09-帆书原樊登读书-高级androidflutter工程师">2024.05-2024-09 <a title="https://www.dushu365.com" href="https://www.dushu365.com">帆书（原：樊登读书）</a>  | 高级Android/Flutter工程师</h3>
<p><u class="jop-noMdConv">组织移动端Flutter研发组、Flutter项目架构设计</u></p>
<ul>
<li>带领从移动端和web端抽调的开发人员搭建适合业务需求的Flutter模块基本框架，设计相关通信接口规范和base页面</li>
</ul>
<p><u class="jop-noMdConv">Flutter的Rocket打包及三方库发布到私有Maven库</u></p>
<ul>
<li>解决升级到最新的稳定版后出现的卡死黑屏问题（so库崩溃）</li>
<li>由于内部使用的Rocket打包基于版本号来管理maven，为了将Flutter的打包也托管到Rocket，通过geadle脚本，在打包过程中使用dart依赖的版本号来覆盖三方库生成的maven输出的版本号，并通过读取环境变量信息，推送到私有maven仓库中</li>
</ul>
<p><u class="jop-noMdConv">语音识别并跳转到app中一些页面的功能模块（AI Hackathon）</u></p>
<ul>
<li>通过关键字识别判断用户语义并完成目标跳转或给出相关建议</li>
</ul>
<h3 id="202207-2024-01-融梦科技-算法工程师-android架构师">2022.07-2024-01 融梦科技 | 算法工程师、Android架构师</h3>
<p><u class="jop-noMdConv">地平线开发板适配及算法研发</u></p>
<ul>
<li>基于地平线开发板（C++）和人脸识别模型，编写人体运动的识别算法，根据计算得到的距离角度等数据进行运动数据的计数，并传递给前端。</li>
<li>为业务开发组解决了以下问题：不稳定网络环境下的设备与服务器、设备与设备间的通信问题。地平线的 AI Express 项目在自定义模型工作流的情况下，帧率骤降的问题。</li>
<li>为业务组提供的技术支持：地平线开发板对于模型导出分析报告。将地平线开发板作为服务端，连接到Android平台，作为智能相机的解决方案和实现(主要是和地平线开发人员的交流和沟通)。地平线的imx415相机模组的180p@90帧工作模式的适配。</li>
</ul>
<p><u class="jop-noMdConv">高通NPU的Tensor加速适配</u></p>
<ul>
<li>将普通业务模型量化为高通NPU支持的格式，通SNPE加载到骁龙875的平板在AIP运行时模式下进行精度损失评估和性能评估，以此判断骁龙NPU和骁龙GPU的实际加速效果(大约8~10倍)。</li>
</ul>
<p><u class="jop-noMdConv">脊柱弯曲判别</u></p>
<ul>
<li>通过深度摄像头，获取背部的深度图，将深度图基于RGB图的像素距离进行坐标转换，得到背部的3D矩阵，计算被试者是否存在脊柱侧弯。主要包括：输入(深度相机的数据流)/输出(UI展示)图片的转换和处理(主要使用了Opencv的图片存储格式转换、裁切、二值化、阈值过滤)。客户端APP主要有骨骼点的绘制，坐标绘制，以及运动判别、姿态判别算法的设计、实现、优化。</li>
</ul>
<p><u class="jop-noMdConv">体能测试客户端项目组</u></p>
<ul>
<li>推动Android架构组的建立，带领研发组处理业务难点，设计部分核心功能组件。</li>
</ul>
<h3 id="201909-2022-06-万达信息-互联网政企服务-android架构师-flutter架构师">2019.09-2022-06 <a title="https://www.wondersgroup.com" href="https://www.wondersgroup.com">万达信息</a> | 互联网/政企服务 | Android架构师、Flutter架构师</h3>
<p><u class="jop-noMdConv">蛮牛健康Android基础框架重构、架构治理</u></p>
<ul>
<li>为了解决业务痛点，重新设计并实现了一个完整的基础架构，比如请求拦截器、页面渲染性能监视器、卡顿检测、异常检测、崩溃记录堆栈。持续的架构治理，比如代码规范、页面渲染规范、与后台接口之间的开发和联调规范。</li>
<li>基于Git、Jenkins、版本管理平台的全自动开发平台搭建，包括：编译脚本、Git Hook、自动化CI、自动发布、全过程飞书通知。</li>
</ul>
<p><u class="jop-noMdConv">混合框架（web）</u></p>
<ul>
<li>基于DWebView针对其原生和JS交互部分进行了优化，提升了在调用失败时的用户体验，以及相互调用过程中的容错机制。加入js调用的鉴权机制，避免入驻的三方web服务过度调用App提供的方法。通过Web inspect调试CDN、HTTP2的升级情况，以及性能统计。加入调试指令，让web开发组可以在生产环境中使用特定方式强制开启Web inspect。</li>
</ul>
<p><u class="jop-noMdConv">混合开发框架（Flutter）</u></p>
<ul>
<li>自研的Flutter业务框架，路由模块、为了让业务组能快速上手，提供了代码生成的一键脚本（类似gradlew）、Flutter业务模块化管理脚本，基于Jenkins的一键CI/CD、Flutter请求降级模块（避免Flutter和原生客户端之间的数据不一致，减少对服务器的请求，减少数据冗余）、Flutter请求mock模块（分离前端和后端）、完全可拆分的Flutter运行环境（让Flutter项目可以一键脱离Android/IOS项目独立运行和调试，便于web组开发Flutter业务功能并进行测试）。</li>
</ul>
<p><u class="jop-noMdConv">升级到Gmssl加密算法</u></p>
<ul>
<li>通过JNI调用GmSSL的国密2（非对称加密，基于ECC）、国密4（对称加密）、国密3算法（消息摘要算法），对Https请求进行二次加密（类似https加密过程，但结合了部分特定需求），与后端对接升级现有加密方案并保持兼容。</li>
</ul>
<p><u class="jop-noMdConv">基于阿里云相册接口设计和实现的公共sdk</u></p>
<ul>
<li>根据阿里云Pds相册api。基于HttpUrlConnection设计并实现一个公共模块，包括阿里云相册的登录鉴权、相册列表、照片列表、获取缩略图、分片上传、上传下载进度回调、批量删除、查询状态等功能，内部使用线程池进行了请求资源的优化，并且设计并实现了内部拦截器和完整的异常处理和请求结果的订阅（使用面向回调的模式，设计成类似rxjava的使用方式）。并且，针对上传下载缓冲区进行了动态优化。</li>
</ul>
<p><u class="jop-noMdConv">实时聊天（IM）模块</u></p>
<ul>
<li>模块基于云信的IM模块，将云信的DemoApp直接改造成业务模块，通过反射以及将部分方法转换为静态方法，以模块化接入现有项目（缩短项目时间）。一方面，提升了模块稳定性，降低了接入成本（高复用），也降低了后期云信SDK升级的成本，另一方面可以隔离风险，避免后期替换其它IM提供商时需要重构。</li>
</ul>
<p><u class="jop-noMdConv">定制平板设备的应用开发</u></p>
<ul>
<li>Launcher应用、系统签名、调试性能问题</li>
<li>与平板厂商对接，为业务组提供技术支持。帮助业务组解决的几个主要问题：system用户签名（sharedUserId）、Launcher启动时的进程被识别为32位，在部分芯片上会导致so库找不到的问题、应用的卸载安装（PackageManager）、应用的启动、Launcher与定制App的权限共享，数据共享、Launcher启动卡顿的问题、通过packageManager扫描已安装应用，并获取应用信息（名称、版本号）、调试并解决在Launcher中检测并调用系统更新失败的问题。</li>
</ul>
<p><u class="jop-noMdConv">基于Janus后端的IM客户端</u></p>
<ul>
<li>带领一个后端，一个Android开发，一个ios架构师，调研现有的一些比较成熟的webrtc的后端，并且，基于通用的webrtc通信和信令过程，搭建演示App。在初步比较后，选定了janus作为webrtc的信令后端。并基于Flutter实现一个客户端演示app，功能包含：（呼叫、被呼叫、持续）视频通话、在线人员列表展示，普通文本消息、通话质量显示。</li>
</ul>
<p><u class="jop-noMdConv">异常自检测、捕获</u></p>
<ul>
<li>使App可以全面检测异常和错误，避免由于业务开发的异常导致App崩溃或闪退。联合后端进行日志、堆内存上报和自动分析。</li>
</ul>
<p><u class="jop-noMdConv">Jenkins的自动打包的改造</u></p>
<ul>
<li>在Jenkins上部署并完善包含Flutter和多个子模块及多个渠道的自动化构建及相关webhook通知</li>
</ul>
<h3 id="201809-2019-09-携宁计算机科技-互联网企服-android开发工程师-android架构师">2018.09-2019-09 携宁计算机科技 | 互联网/企服 | Android开发工程师、Android架构师</h3>
<p><u class="jop-noMdConv">来电悬浮窗</u><br />
<u class="jop-noMdConv">Flutter嵌入（调研）</u><br />
<u class="jop-noMdConv">华泰联合证券（内部）、国泰君安证券（内部）项目流程管理App</u></p>
<ul>
<li>要包括立项、评审、流转、审核、办结等一般项目的流程管理。以及新三板等特殊业务的专项流程管理。证券公司业务人员可以通过App快速申请、审批、办理。并且，通过动态化的页面下发机制，让流程办理页面完全动态可配置。</li>
</ul>
<p><u class="jop-noMdConv">国寿、太平等资产管理公司CRM系统客户端App</u><br />
<u class="jop-noMdConv">投行模板App维护</u></p>
<ul>
<li>核心模板App的优化和维护，包括性能优化、稳定性优化、架构升级、架构维护。<br />
华为快应用（调研）<br />
基于WebView的混合项目优化和维护<br />
基础业务MVP框架的升级优化</li>
</ul>
<h3 id="201606-201809-麦田映像科技-互联网企服-android开发工程师">2016.06-2018.09 麦田映像科技 | 互联网/企服 | Android开发工程师</h3>
<p><u class="jop-noMdConv">线下教师课堂竞赛打分模块</u><br />
<u class="jop-noMdConv">热修复集成（线下教师）</u></p>
<ul>
<li>线下教师的应用增加Tinker的集成，避免线下教师需要全量更新来修复Bug。</li>
</ul>
<p><u class="jop-noMdConv">业务逻辑开发</u></p>
<ul>
<li>基于LibGDX游戏SDK进行的游戏开发。</li>
</ul>
<h2 id="语言能力">语言能力</h2>
<p>英语CET四级</p>
<h2 id="兴趣爱好">兴趣爱好</h2>
<p>跑步、音乐</p>
<h2 id="技能清单">技能清单</h2>
<ul>
<li>★★★ Java、Kotlin、Linux、Flutter</li>
<li>★★☆ C++、Python、docker、OpenWrt、nginx、NDK</li>
<li>★☆☆ JavaScript</li>
</ul>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Android通过adb来dump堆内存进行代码分析]]></title>
            <guid>7f36a4d7f9a6432481f46a0a58faafc6</guid>
            <pubDate>Sun, 15 Dec 2024 04:25:35 GMT</pubDate>
            <content:encoded><![CDATA[<p>注：<code>am dumpheap</code>需满足以下条件之一：</p>
<ul>
<li>目标App的AndroidManifest中<code>android:debuggable=true</code></li>
<li>系统是debuggable的（即：<code>adb shell getprop ro.debuggable</code>的结果为1）（也就是必须要是debug编译的系统）（如果手头没有debug编译的系统的话，推荐直接用模拟器，其中，以<code>Apple silicon</code>的<code>macOS</code>或者<code>ARM64</code>的<code>Windows</code>为最佳）</li>
</ul>
<hr />
<p>对于release模式的真机（以前MIUI的开发版系统几乎都是debug编译的，但是从Hyper OS开始，都是release编译了），但是，如果你安装了<code>Magisk</code>，可以尝试在进入<code>su</code>后执行如下命令，临时启用<code>adb root</code>（重启后失效）：</p>
<div><pre class="hljs"><code>resetprop ro.debuggable 1
resetprop service.adb.root 1
magiskpolicy --live <span class="hljs-string">'allow adbd adbd process setcurrent'</span>
magiskpolicy --live <span class="hljs-string">'allow adbd su process dyntransition'</span>
magiskpolicy --live <span class="hljs-string">'permissive { su }'</span>
<span class="hljs-built_in">kill</span> -9 `ps -A | grep adbd | awk <span class="hljs-string">'{print $2}'</span>` </code></pre></div>
<hr />
<p>对于使用模拟器，但是<code>adb root</code>提示<code>adbd cannot run as root in production builds</code>的：参考StackOverFlow的一个回答：<br />
Select a System Image.</p>
<ul>
<li>Pick any image that does NOT say “(Google Play)” in the Target column.</li>
<li>If you depend on Google APIs (Google Sign In, Google Fit, etc.), pick an image marked with “(Google APIs)”.</li>
<li>You might have to switch from the “Recommended” group to the “x86 Images” or “Other Images” group to find one.</li>
</ul>
<p>也就是说：带Google Play的镜像是不能<code>adb root</code>的，如果需要调试Google服务相关的app（比如一些依赖Google Api的app），要么<code>Lucky patcher</code>移除掉Google依赖再试。要么，下载带有(Google APIs)的镜像，注意不是ATD（Automated Test Device）。</p>
<p>并且，在Apple silicon的macOS上，Pixel 2、Pixel Fold等设备是选不到某些镜像的。比如api-31（android-12）(Google APIs)的，目前我使用的镜像是api-31，Pixel 5，arm64，(Google APIs)。</p>
<hr />
<p>准备就绪后，直接运行Android Emulator、安装apk、然后在adb root之后执行heapdump：</p>
<div><pre class="hljs"><code>adb shell <span class="hljs-string">"am dumpheap <span class="hljs-variable">${_package_name}</span> /data/local/tmp/dump.hprof"</span></code></pre></div>
<p>Tips：可以通过如下命令跳过开机动画等无关项，并且直接后台运行，然后用scrcpy远程连接：</p>
<div><pre class="hljs"><code>emulator -no-qt -no-window -no-audio -no-snapshot-load -no-boot-anim -avd <span class="hljs-string">"<span class="hljs-variable">${_avd_name}</span>"</span> -qemu -m 2048 -enable-kvm -cpu host</code></pre></div>
<p>对于只需要分析字符串数据的，可以直接使用strings命令<code>strings /data/local/tmp/dump.hprof</code>，提取出文件中所有字符串，然后进行分析。<br />
如果是要完整分析的，可以导入到Android Studio的profiler里面（配合反编译dex）进行数据分析。或者用自己趁手的工具分析（JAVA的堆内存快照分析工具）。</p>
<p><strong>内存分析不在这里展开，有时间空闲再码一下文章</strong></p>
<hr />
<p>结尾顺便贴一下我用于初始化软路由中运行的docker容器（<code>androidsdk/android-31:latest</code>）中<code>emulator</code>的<code>entrypoint</code>脚本，自行查看和复制，几乎都有注释的。</p>
<div><pre class="hljs"><code><span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-built_in">set</span> -x
<span class="hljs-built_in">set</span> +e
<span class="hljs-comment"># enable job control for command 'fg'</span>
<span class="hljs-built_in">set</span> -m

<span class="hljs-comment">#enble ip forward(there's no effect for this case!)</span>
<span class="hljs-comment">#sysctl -w net.ipv4.ip_forward=1</span>
<span class="hljs-comment">#let the package with source ip:127.0.0.1 can be decided by route filter.</span>
<span class="hljs-comment">#sysctl -w net.ipv4.conf.all.route_localnet=1</span>

<span class="hljs-keyword">if</span> [ ! -f ~/.firstboot ];<span class="hljs-keyword">then</span>
  apt update
  <span class="hljs-comment">#emluator -qemu -h 要用到</span>
  apt install -y libxcursor1 libpulse0 xvfb
  <span class="hljs-comment">#jdk</span>
  apt install -y openjdk-17-jdk
  apt install -y telnet nmap iptables iptables-persistent tmux lsof iputils-ping netcat
  <span class="hljs-comment">#解决一下显卡加速的问题就好了，emulator -gpu host</span>
  <span class="hljs-comment">#apt install -y virt-manager libxcursor1 qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils cpu-checker libva-dev vainfo</span>
  <span class="hljs-comment">#apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils libva-dev vainfo</span>
  <span class="hljs-comment">#service libvirtd start</span>
  sdkmanager --install emulator
  sdkmanager --install <span class="hljs-string">'cmdline-tools;latest'</span>
  touch ~/.firstboot
<span class="hljs-keyword">fi</span>

<span class="hljs-comment">#如果是-read-only模式启动，emulator会把修改的内容存到/tmp/android-unknown，会导致占用大量体积的。需要清理，正常启动时不需要。</span>
<span class="hljs-comment">#if [ -d /tmp/android-unknown ]; then</span>
<span class="hljs-comment">#  rm -rf /tmp/android-unknown</span>
<span class="hljs-comment">#fi</span>

<span class="hljs-built_in">export</span> _avd_name=avd

<span class="hljs-comment">#Avoid Error: "Running multiple emulators with the same AVD is an experimental feature."</span>
<span class="hljs-keyword">if</span> [ -d /opt/android-sdk-linux/.android/<span class="hljs-variable">${_avd_name}</span>/<span class="hljs-variable">${_avd_name}</span>.avd ]; <span class="hljs-keyword">then</span>
  rm /opt/android-sdk-linux/.android/<span class="hljs-variable">${_avd_name}</span>/<span class="hljs-variable">${_avd_name}</span>.avd/hardware-qemu.ini.lock || <span class="hljs-literal">true</span>
  rm /opt/android-sdk-linux/.android/<span class="hljs-variable">${_avd_name}</span>/<span class="hljs-variable">${_avd_name}</span>.avd/multiinstance.lock || <span class="hljs-literal">true</span>
<span class="hljs-keyword">fi</span>

<span class="hljs-keyword">if</span> [ ! -f /opt/android-sdk-linux/.android/<span class="hljs-variable">${_avd_name}</span>/<span class="hljs-variable">${_avd_name}</span>.avd/config.ini ];<span class="hljs-keyword">then</span>
  sdkmanager --install emulator
  sdkmanager --install <span class="hljs-string">'cmdline-tools;latest'</span>
  <span class="hljs-comment">#注意：由于代理工具依赖谷歌服务，所以，这里必须要用google_apis的镜像</span>
  <span class="hljs-built_in">echo</span> no|avdmanager create avd -n <span class="hljs-variable">${_avd_name}</span> --abi google_apis/x86_64 -k <span class="hljs-string">"system-images;android-31;google_apis;x86_64"</span>
<span class="hljs-keyword">fi</span>

<span class="hljs-comment">#强制重写telnet的token</span>
&gt;/root/.emulator_console_auth_token <span class="hljs-built_in">echo</span> -n <span class="hljs-string">"vGwk2RHZyv8PDqjZ"</span>

emulator -no-qt -no-window -no-audio -no-snapshot-load -no-boot-anim -avd <span class="hljs-variable">${_avd_name}</span> -qemu -m 2048 -enable-kvm -cpu host &amp;
<span class="hljs-comment">#xvfb-run emulator -gpu host -no-qt -no-window -no-audio -no-snapshot-load -no-boot-anim -avd ${_avd_name} -qemu -m 3072 -enable-kvm -cpu host &amp;</span>

<span class="hljs-comment">#允许远程访问adb</span>
{
  <span class="hljs-comment">#iptables -F</span>
  iptables -A FORWARD -j ACCEPT
  iptables -A OUTPUT -j ACCEPT
  iptables -A INPUT -j ACCEPT
  <span class="hljs-comment">#iptables -t nat -F</span>
  iptables -t nat -A PREROUTING -d 172.20.0.119 -j DNAT --to-destination 127.0.0.1
  iptables -t nat -A POSTROUTING -s 127.0.0.1 -j SNAT --to-source 172.20.0.119
}

sleep 40s

adb root

sleep 5s

<span class="hljs-keyword">if</span> [ ! -f ~/.adb_config ];<span class="hljs-keyword">then</span>
  <span class="hljs-comment">#修改开发者选项、系统设置</span>
  {
    adb shell settings put global development_settings_enabled 1
    adb shell settings put global animator_duration_scale 0.5
    adb shell settings put global transition_animation_scale 0.5
    adb shell settings put global window_animation_scale 0.5
    adb shell settings put global ntp_server <span class="hljs-string">"ntp.aliyun.com"</span>
  }
  <span class="hljs-comment">#禁用无关软件（需要adb root后）</span>
  {
    <span class="hljs-comment">#gmail</span>
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.gm
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.apps.docs
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.youtube
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.calendar
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.apps.maps
    <span class="hljs-comment">#禁用搜索框可能会导致Launcher出问题</span>
<span class="hljs-comment">#    adb shell pm disable com.google.android.googlequicksearchbox</span>
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.apps.photos
    adb shell pm <span class="hljs-built_in">disable</span> com.google.android.apps.youtube.music
    <span class="hljs-comment">#Chrome</span>
    adb shell pm <span class="hljs-built_in">disable</span> com.android.chrome
  }
  touch ~/.adb_config
<span class="hljs-keyword">fi</span>

<span class="hljs-built_in">fg</span> || <span class="hljs-literal">true</span>
sleep infinity
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[对于coturn测试stun和turn]]></title>
            <guid>ab4e099e9b5b4055ac92fcc56c76de06</guid>
            <pubDate>Wed, 04 Dec 2024 02:04:07 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="对于stun">对于stun：</h2>
<p>首先，stun只是用来探测外部主机地址（当然，也可以用来探测NAT类型），所以，流量很小，大可以直接用现有的公开stun，注意，coturn把stun和turn的端口融合了，所以<code>turnserver.conf</code>中<code>listening-port=</code>既是stun的端口，也是turn的端口。<br />
而且，大多数stun都是不需要身份验证的。<br />
我们最常使用的两个stun标准</p>
<div><pre class="hljs"><code>rfc 3489 : need 2 public ip to determining the NAT type.
rfc 5389 : it depends on the client's NAT traversal solution.</code></pre></div>
<p>stun测试有两个现有客户端：</p>
<div><pre class="hljs"><code><span class="hljs-comment"># （推荐使用stunclient）behavior的mode会直接显示出NAT模式，需要多测试几遍。对于Nextcloud call来说，只要显示Binding test: success，就行</span>
stunclient --mode behavior --family 4 --protocol udp turn.cloudflare.com 3478
<span class="hljs-comment"># 如果是自己搭建的，遇到莫名其妙地死循环，是因为遵循的rfc标准不同，pystun3是需要两个公网ipv4地址的。</span>
pystun3 -d -H turn.cloudflare.com -p 3478</code></pre></div>
<h2 id="对于turn">对于turn：</h2>
<p>turn主要是用来转发流量的，所以，流量很大，几乎不存在公共免费的turn服务器，必须要使用自己的服务，coturn的turn服务有两种身份验证模式：<code>static-auth-secret</code>（支持REST Api）和身份密码模式。</p>
<p>身份密码模式直接填就行，接下来主要说下更常用的<code>static-auth-secret</code>（支持REST Api）模式：<br />
通过<code>static-auth-secret</code>生成用户名密码对：<br />
打开一个终端，安装好nodejs，键入nodejs，进入nodejs的交互模式<br />
复制如下函数定义，粘贴，回车确认：</p>
<div><pre class="hljs"><code><span class="hljs-keyword">var</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">'crypto'</span>);

<span class="hljs-keyword">function</span> <span class="hljs-title function_">getTURNCredentials</span>(<span class="hljs-params">name, secret</span>){    
    <span class="hljs-keyword">var</span> unixTimeStamp = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()/<span class="hljs-number">1000</span>) + <span class="hljs-number">24</span>*<span class="hljs-number">3600</span>,  <span class="hljs-comment">//设置生成的密码有效期为24小时</span>
        username = [unixTimeStamp, name].<span class="hljs-title function_">join</span>(<span class="hljs-string">':'</span>),
        password,
        hmac = crypto.<span class="hljs-title function_">createHmac</span>(<span class="hljs-string">'sha1'</span>, secret);
    hmac.<span class="hljs-title function_">setEncoding</span>(<span class="hljs-string">'base64'</span>);
    hmac.<span class="hljs-title function_">write</span>(username);
    hmac.<span class="hljs-title function_">end</span>();
    password = hmac.<span class="hljs-title function_">read</span>();
    <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">username</span>: username,
        <span class="hljs-attr">password</span>: password
    };
}</code></pre></div>
<p>键入如下函数调用，即可得到用户名密码对：</p>
<div><pre class="hljs"><code><span class="hljs-title function_">getTURNCredentials</span>(<span class="hljs-string">"test1"</span>, <span class="hljs-string">"fc7833ac40ac3fef7ea0c5ea45cdbe173c47f20dadc6d**此处隐藏10字符**ff5780321"</span>)</code></pre></div>
<p>最终填到测试turn的<a title="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/" href="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/">在线工具</a>中的内容如下：</p>
<div><pre class="hljs"><code>STUN or TURN URI:（服务器URL）
turn:turn.cloudflare.com:3478
TURN username:（用户名，形如如下格式，冒号前面的一串数字是Linux时间戳，加上冒号和后面的字符串，作为一个完整的用户名）
1733363329:test1
TURN password:（密码，形如如下的字符串）
j7i6bgUO+xt1O1qxBh**此处隐藏4字符**sziaA=</code></pre></div>
<p>PS：如果是自部署的coturn，并且开了web-admin的话，在网页端测试点击开始后<br />
可以去coturn的web-admin界面查看：<br />
注意，使用chrome打开web-admin能会遇到频繁被登出，可以使用其它浏览器<br />
可以进入coturn容器的shell，通过cli查看（仅能查看一些基本信息，无法查看session）<br />
另外，容器里还有一些turn开头的命令工具，有空可以看看什么作用</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在docker中使用golang镜像，编译mt7621平台上的sing-box]]></title>
            <guid>f021d6f5e82f45feabf3ff7d28b46a82</guid>
            <pubDate>Thu, 17 Oct 2024 13:10:39 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="在docker中编译mt7621平台上的sing-box">在docker中编译mt7621平台上的sing-box</h3>
<ul>
<li>git拉取到当前目录</li>
<li>拉取：golang:alpine</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-comment"># 进入工作目录（拉取的sing-box源码目录）</span>
<span class="hljs-built_in">cd</span> sing-box

<span class="hljs-comment"># mt7621的相关环境变量</span>
<span class="hljs-built_in">export</span> GOOS=linux
<span class="hljs-built_in">export</span> GOARCH=mipsle
<span class="hljs-built_in">export</span> GOMIPS=softfloat
<span class="hljs-built_in">export</span> CGO_ENABLED=0

<span class="hljs-comment"># 如果go build过程中提示网络问题的话，设置一下代理（大概率是要设置的，要不然就得使用国内源）</span>
<span class="hljs-built_in">export</span> http_proxy=http://10.0.0.1:12333
<span class="hljs-built_in">export</span> https_proxy=<span class="hljs-variable">$http_proxy</span>
<span class="hljs-comment"># 启用 Go Modules 功能</span>
go env -w GO111MODULE=on
<span class="hljs-comment"># 1. 七牛 CDN</span>
go env -w  GOPROXY=https://goproxy.cn,direct
<span class="hljs-comment"># 2. 阿里云</span>
go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct
<span class="hljs-comment"># 3. 官方</span>
go env -w  GOPROXY=https://goproxy.io,direct
<span class="hljs-comment"># 检查设置结果</span>
go env | grep GOPROXY

<span class="hljs-comment">#版本号</span>
<span class="hljs-built_in">export</span> _version=<span class="hljs-string">'1.10.2'</span>

<span class="hljs-comment"># 编译</span>
go build -v -trimpath -ldflags <span class="hljs-string">"-X 'github.com/sagernet/sing-box/constant.Version=<span class="hljs-variable">${_version}</span>' -s -w -buildid="</span> -tags with_clash_api,with_ech,with_gvisor,with_quic,with_reality_server,with_utls,with_wireguard ./cmd/sing-box

<span class="hljs-comment"># 编译后会在当前目录生成sing-box二进制文件，文件偏大，用upx压缩一下</span>
upx sing-box

<span class="hljs-comment"># 传给mt7621的设备</span>
scp sing-box root@10.1.1.1:/tmp/
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[facefusion使用记录]]></title>
            <guid>954a719e700a4388b518e5f3fce3cd85</guid>
            <pubDate>Wed, 25 Sep 2024 13:51:23 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="mac-os-下m1-max芯片使用conda安装">Mac OS 下（M1 Max芯片），使用Conda安装</h3>
<div><pre class="hljs"><code><span class="hljs-comment"># 我的conda初始化是单独放到`~/.bash_profile`中的，所以需要提前source一下。</span>
<span class="hljs-built_in">source</span> ~/.bash_profile

<span class="hljs-comment"># 创建虚拟环境</span>
conda create --no-default-packages -n facefusion python=3.10

<span class="hljs-comment">#如果要删除虚拟环境的话</span>
conda remove --name facefusion --all
<span class="hljs-comment"># 检查删除结果</span>
conda info
<span class="hljs-comment"># 找到"envs directories"，查看是否删除干净了</span>
ll /opt/homebrew/Caskroom/miniconda/base/envs

<span class="hljs-comment"># 目前需要切换到特定分支，默认的稳定版的分支会有numpy的版本冲突问题，暂时无解</span>
<span class="hljs-comment"># 当前的最新版已经不需要了</span>
<span class="hljs-comment"># git checkout next</span>


<span class="hljs-comment"># 进入项目目录</span>
<span class="hljs-comment"># 进行安装</span>
./install.py</code></pre></div>
<h3 id="mac-os-下m1-max芯片使用conda启动">Mac OS 下（M1 Max芯片），使用Conda启动</h3>
<div><pre class="hljs"><code><span class="hljs-built_in">source</span> ~/.bash_profile

<span class="hljs-comment"># 安装时创建的环境名称是facefusion</span>
conda activate facefusion

<span class="hljs-comment"># 进入项目目录</span>
<span class="hljs-comment"># 启动，打印帮助信息</span>
./facefusion.py headless-run -h</code></pre></div>
<h3 id="以next分支为例关闭未成年内容审查nsfw线上环境是要开的但是自己测试的时候可以关掉而且它有的时候会误判-开启0000访问">以next分支为例：关闭未成年内容审查（NSFW）（线上环境是要开的，但是自己测试的时候可以关掉，而且，它有的时候会误判）。开启0.0.0.0访问</h3>
<div><pre class="hljs"><code><span class="hljs-comment">diff --git a/facefusion/content_analyser.py b/facefusion/content_analyser.py</span>
<span class="hljs-comment">index 998e560..a40094f 100644</span>
<span class="hljs-comment">--- a/facefusion/content_analyser.py</span>
<span class="hljs-comment">+++ b/facefusion/content_analyser.py</span>
<span class="hljs-meta">@@ -71,10 +71,10 @@</span> def analyse_stream(vision_frame : VisionFrame, video_fps : Fps) -&gt; bool:
 
 
 def analyse_frame(vision_frame : VisionFrame) -&gt; bool:
<span class="hljs-deletion">-	vision_frame = prepare_frame(vision_frame)</span>
<span class="hljs-deletion">-	probability = forward(vision_frame)</span>
<span class="hljs-addition">+	#vision_frame = prepare_frame(vision_frame)</span>
<span class="hljs-addition">+	#probability = forward(vision_frame)</span>
 
<span class="hljs-deletion">-	return probability &gt; PROBABILITY_LIMIT</span>
<span class="hljs-addition">+	return False</span>
 
 
 def forward(vision_frame : VisionFrame) -&gt; float:
<span class="hljs-comment">diff --git a/facefusion/uis/layouts/default.py b/facefusion/uis/layouts/default.py</span>
<span class="hljs-comment">index c5cf2d6..ab085cc 100755</span>
<span class="hljs-comment">--- a/facefusion/uis/layouts/default.py</span>
<span class="hljs-comment">+++ b/facefusion/uis/layouts/default.py</span>
<span class="hljs-meta">@@ -114,4 +114,4 @@</span> def listen() -&gt; None:
 
 
 def run(ui : gradio.Blocks) -&gt; None:
<span class="hljs-deletion">-	ui.launch(favicon_path = 'facefusion.ico', inbrowser = state_manager.get_item('open_browser'))</span>
<span class="hljs-addition">+	ui.launch(favicon_path = 'facefusion.ico', share=False, server_name="0.0.0.0", inbrowser = state_manager.get_item('open_browser'))</span>
</code></pre></div>
<h3 id="网页版操作时-next分支有个bugpreview控件的ui宽度有问题而且它是悬浮的所以要么把网页缩放到很小要么通过inspect调整preview控件的宽度为25">网页版操作时。next分支有个Bug，preview控件的UI宽度有问题，而且它是悬浮的，所以，要么，把网页缩放到很小，要么，通过inspect，调整preview控件的宽度为25%</h3>
<h3 id="超参数建议">超参数建议</h3>
<ul>
<li>不建议选face_enhancer和frame_enhancer，会导致消耗的时间特别长</li>
<li>EXECUTION PROVIDERS，Mac OS可以选上coreml（可以使用Apple的Metal引擎）</li>
<li>EXECUTION THREAD COUNT，cpu核心数</li>
<li>EXECUTION QUEUE COUNT，队列数</li>
<li>VIDEO MEMORY STRATEGY，内存不紧张的，可以选moderate</li>
<li>（输出为视频时）OUTPUT VIDEO ENCODER，推荐选libx265</li>
<li>（输出为视频时）OUTPUT VIDEO QUALITY，设置100</li>
<li>SOURCE，添加目标人物的头像，可以选择多个图片或者视频</li>
<li>TARGET，添加媒体素材</li>
<li>（输出为视频时）PREVIEW FRAME，可以自己用于临时预览（与实际效果不一定是完全一样的）</li>
<li>FACE SELECTOR MODE，如果你的SOURCE对应的图片里就只有一个人，可以使用one，如果是reference的话，需要调整以下参数
<ul>
<li>REFERENCE FACE DISTANCE，值越大，越像SOURCE的目标人物</li>
</ul>
</li>
<li>FACE SELECTOR ORDER，当有多个人脸是可以根据条件设置优先顺序</li>
<li>FACE MASK TYPES，可以都选上</li>
<li>FACE MASK BLUR，可以设置为0（未知参数）</li>
<li>FACE DETECTOR SCORE，如果有不该识别为人脸的物品/部位被识别为人脸了，可以适当提高该值</li>
<li>FACE LANDMARKER SCORE，相当于换脸后的置信度阈值</li>
</ul>
<h3 id="使用command进行转换">使用command进行转换</h3>
<ul>
<li>待解决的问题：几乎使用同样的参数，在web页面中生成的视频，码率为1773 kb/s，但是用command生成的视频，码率为30333 kb/s，并且，用command生成的视频，Mac OS的Finder是无法直接预览的。（暂未解决，应该是有几个ffmpeg的后处理未完成）</li>
</ul>
<div><pre class="hljs"><code><span class="hljs-built_in">echo</span> <span class="hljs-string">"Sample: ./handle.sh 'source_img' 'target_video' 'output_video_path'"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"===&gt; press Enter to continue."</span>
<span class="hljs-built_in">read</span> _tempValue

_tempFile=<span class="hljs-string">"/tmp/<span class="hljs-subst">$(date '+%Y-%m-%d-%H-%M')</span>-<span class="hljs-subst">$(uuidgen)</span>.mp4"</span>
_source=<span class="hljs-string">"<span class="hljs-variable">${1}</span>"</span>
_target=<span class="hljs-string">"<span class="hljs-variable">${2}</span>"</span>
_output=<span class="hljs-string">"<span class="hljs-variable">${3}</span>"</span>

./facefusion.py headless-run \
--execution-providers coreml \
--execution-thread-count 11 \
--execution-queue-count 2 \
--temp-frame-format png \
--video-memory-strategy moderate \
--output-image-quality 100 \
--output-audio-encoder aac \
--output-video-encoder libx265 \
--output-video-quality 100 \
--output-video-preset veryfast \
--output-video-fps 25 \
 \
 \
--face-selector-mode one \
--face-selector-order large-small \
--face-selector-gender female \
 \
 \
--face-mask-types box occlusion region \
--face-mask-regions skin left-eyebrow right-eyebrow left-eye right-eye glasses nose mouth upper-lip lower-lip \
--face-mask-blur 0.05 \
 \
--face-detector-score 0.6 \
--face-landmarker-score 0.6 \
 \
--log-level debug  \
 \
-s <span class="hljs-string">"<span class="hljs-variable">${_source}</span>"</span> \
-t <span class="hljs-string">"<span class="hljs-variable">${_target}</span>"</span> \
-o <span class="hljs-string">"<span class="hljs-variable">${_tempFile}</span>"</span> \

<span class="hljs-built_in">echo</span> <span class="hljs-string">"Generated temp video file located here: <span class="hljs-variable">${_tempFile}</span>"</span>

<span class="hljs-comment"># 复制源视频的参数</span>
_tempFileWithAudio=<span class="hljs-string">"/tmp/<span class="hljs-subst">$(date '+%Y-%m-%d-%H-%M')</span>-<span class="hljs-subst">$(uuidgen)</span>.mp4"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"[Post handle] Merge Video from temp file and Audio from target file"</span>
<span class="hljs-built_in">set</span> -x
ffmpeg -hide_banner -loglevel error -i <span class="hljs-string">"<span class="hljs-variable">${_tempFile}</span>"</span> -i <span class="hljs-string">"<span class="hljs-variable">${_target}</span>"</span> -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 -shortest -y <span class="hljs-string">"<span class="hljs-variable">${_tempFileWithAudio}</span>"</span>
<span class="hljs-built_in">set</span> +x

<span class="hljs-comment">### 如果实在嫌麻烦，下面的两步，可以试试直接降低视频流的比特率</span>
<span class="hljs-comment">### 这一步还没有分析完成</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"[Post handle] Concat video"</span>
_concatConfig=<span class="hljs-string">"/tmp/.concat_config_<span class="hljs-subst">$(date '+%Y-%m-%d-%H-%M')</span>-<span class="hljs-subst">$(uuidgen)</span>"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"file '<span class="hljs-variable">${_tempFileWithAudio}</span>'\n"</span> &gt; <span class="hljs-string">"<span class="hljs-variable">${_concatConfig}</span>"</span>
ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i <span class="hljs-string">"<span class="hljs-variable">${_concatConfig}</span>"</span> -c:v copy -c:a aac -y <span class="hljs-string">"<span class="hljs-variable">${_output}</span>"</span>
<span class="hljs-comment">### 后面可能还有一步</span>

<span class="hljs-built_in">echo</span> <span class="hljs-string">'All Done!'</span>
</code></pre></div>
<h3 id="暴力截取的web版本的-ffmpeg命令记录">暴力截取的web版本的 ffmpeg命令记录</h3>
<div><pre class="hljs"><code><span class="hljs-comment"># 拆分视频为帧图</span>
ffmpeg -hide_banner -loglevel error -i /private/var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/gradio/36ef46ec576711637d2ce8b00afb1d20fe52c168a486203aff5c42d9c1bbd27a/test.mp4 -s 720x1280 -q:v 0 -vf fps=25.0 -vsync 0 /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/facefusion/<span class="hljs-built_in">test</span>/%08d.png

<span class="hljs-comment"># face_swapper</span>

<span class="hljs-comment"># 将换脸完成的帧图合成为视频（无音频）</span>
ffmpeg -hide_banner -loglevel error -r 25.0 -i /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/facefusion/<span class="hljs-built_in">test</span>/%08d.png -s 720x1280 -c:v libx265 -crf 0 -preset veryfast -vf framerate=fps=25.0 -pix_fmt yuv420p -colorspace bt709 -y /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/facefusion/<span class="hljs-built_in">test</span>/temp.mp4


<span class="hljs-comment"># 合并音频</span>
ffmpeg -hide_banner -loglevel error -i /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/facefusion/<span class="hljs-built_in">test</span>/temp.mp4 -i /private/var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/gradio/36ef46ec576711637d2ce8b00afb1d20fe52c168a486203aff5c42d9c1bbd27a/test.mp4 -c:v copy -c:a aac -map 0:v:0 -map 1:a:0 -shortest -y /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/41fcdb05.mp4


<span class="hljs-comment"># concat（待分析） 注： /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/tmpgyx5kq 文件的内容为：file '/var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/xx-ui-xxx-xxxxx.mp4'\n</span>
ffmpeg -hide_banner -loglevel error -f concat -safe 0 -i /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/tmpgyx5kq0j -c:v copy -c:a aac -y /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/41fcdb05.mp4


<span class="hljs-comment"># 未知（待分析）</span>
ffmpeg -y -loglevel quiet -i /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/tmpy8n8zqyr /var/folders/w7/msfp_m6112j80xdxx_slpkwr0000gn/T/41fcdb05.mp4
</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[记录攻击者在进行ssh密码爆破时使用的密码，基于fail2ban和honeypot]]></title>
            <guid>c8d418fbe09f480f9091afa598e33110</guid>
            <pubDate>Sun, 18 Aug 2024 07:52:13 GMT</pubDate>
            <content:encoded><![CDATA[<p>不知道是不是大环境不好，很多人闲的，最近的ssh攻击明显比以往要多得多。</p>
<p>这边大致列一下一些应对<code>ssh</code>密码爆破的常见方案。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方案</th>
<th style="text-align:left">优点</th>
<th style="text-align:left">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">使用复杂密码</td>
<td style="text-align:left">确实可以在一定程度上增加密码破解的复杂性</td>
<td style="text-align:left">严谨地来说，低概率事件不等于0可能事件，所以，是不是真的有人能撞出正确的密码（即使概率真的很低）</td>
</tr>
<tr>
<td style="text-align:left">使用<code>ssh-key</code></td>
<td style="text-align:left">可以完全避免密码验证</td>
<td style="text-align:left">对于自己使用的场景，有时候需要在外面进行密码登录时，就做不到了</td>
</tr>
<tr>
<td style="text-align:left"><code>ssh</code>端口放到内网中，通过安全隧道进行访问</td>
<td style="text-align:left">可以直接保护<code>ssh</code>服务端口</td>
<td style="text-align:left">对于自己使用，每次都得先成功地创建隧道后才能使用</td>
</tr>
<tr>
<td style="text-align:left">使用<code>fail2ban</code>之类的应用层防护</td>
<td style="text-align:left">不影响个人使用</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">使用端口敲门（<code>knock</code>）</td>
<td style="text-align:left">和安全隧道类似，但是，一旦敲门包成功验证，整个ip都可以访问，而不需要持续保持隧道连接</td>
<td style="text-align:left">仅移动端场景使用时，不是很方便</td>
</tr>
</tbody>
</table>
<p>我目前主要靠复杂密码，加<code>fail2ban</code>来保护，然后，默认的<code>22</code>端口仅仅支持<code>ssh-key</code>登录。</p>
<p>就像上面表格里列出的。我想知道密码爆破的攻击者都是用的什么密码本（大多数密码爆破都是使用的现成的或者按照规则生成的密码本，并且，密码本生成时，随着长度和复杂度上升，最终得到的密码本大小会指数级增大），于是就有了这么个需求。</p>
<p>由于目前已经配置过<code>fail2ban</code>了（可以参考另一篇<code>fail2ban</code>的文章），在达到限制次数后，就可以直接进行端口重定向等等的操作。进行端口重定向对应<code>fail2ban</code>的<code>action</code>如下（假设目标重定向端口为<code>8022</code>）。</p>
<div><pre class="hljs"><code><span class="hljs-comment">#将目标端口是22的请求包重定向到8022</span>
<span class="hljs-comment">#action = nftables-multiport[name=%(__name__)s-all, port="22", protocol="tcp,udp", table_family=inet, chain_type=nat, chain_hook=prerouting, chain_priority=dstnat +1, blocktype="counter redirect to 8022"]</span>

<span class="hljs-comment">#将所有端口重定向到8022</span>
<span class="hljs-attr">action</span> = nftables-allports[name=%(__name__)s-all, protocol=<span class="hljs-string">"tcp,udp"</span>, table_family=inet, chain_type=nat, chain_hook=prerouting, chain_priority=dstnat +<span class="hljs-number">1</span>, blocktype=<span class="hljs-string">"counter redirect to 8022"</span>]

<span class="hljs-comment">#直接丢掉请求包</span>
<span class="hljs-comment">#action = nftables-allports[name=%(__name__)s-all, protocol="tcp,udp,icmp,igmp,icmpv6", blocktype="counter drop"]</span></code></pre></div>
<h4 id="回到查看失败登录的密码的明文的需求">回到查看失败登录的密码的明文的需求。</h4>
<ul>
<li>首先想到的是，<code>sshd</code>服务是不是支持直接log记录密码。
<ul>
<li>结果：默认的<code>ssh</code>服务是不支持直接log密码明文的（即使是失败的登录）其实也很合理，比如意外输错了某一位密码，如果被log下来了，那么，针对log进行分析就能大幅缩小密码破解的难度。但是，可以通过手动修改<code>sshd</code>源码，然后编译，来进行记录。不过这比较麻烦，而且，升级的时候不方便，遂，该方案pass。</li>
</ul>
</li>
<li>另一个方案就是通过<code>docker</code>，运行一个修改过<code>sshd</code>的容器，然后，通过端口重定向将正常的ssh登录请求重定向到这个修改后的<code>sshd</code>服务。但我觉得这还不是最优解，毕竟，一个Ubuntu容器，然后还得修改<code>sshd</code>服务，再运行这个<code>sshd</code>服务，只是为了log下来登录失败时的密码。成本颇高。</li>
</ul>
<h4 id="最后我们再来看一下我现在正在用的方案">最后我们再来看一下我现在正在用的方案：</h4>
<ul>
<li>其实，对于被攻击端，我们只需要完成<code>sshd</code>登录的过程即可，也就是，我们只需要按照<code>sshd</code>登录的过程，完成握手、交换身份指纹，然后等待客户端发送用户名和密码即可了。一旦得到用户名和密码，即可直接告知客户端：登录失败。只要整个过程中的所有特征都和原先的<code>sshd</code>服务提供的一模一样，攻击者是无法察觉到的，并且，由于握手包和接收密码的都是我们自己的代码，所以，可以对密码明文做任何我们需要的事情（比如记录到日志中去）。</li>
</ul>
<p>本着有现成的就不动手自己写，搜索一番，找到了一类现成的服务。蜜罐（<code>honeypot</code>），针对各种各样的服务（比如数据库、<code>nginx</code>、<code>ssh</code>），都有各个行业的前辈们开发了对应的<code>honeypot</code>服务。在尝试了好几个<code>honeypot</code>的<code>docker</code>镜像之后，找到了一个 写的比较好的：<code>wildwildangel/tiny-ssh-honeypot:edge</code>（基于<code>golang</code>，而且，是静态编译的，所以，镜像体积很小）。</p>
<p>部署<code>docker</code>的过程就不写了，贴一下我的<code>docker-compose.yaml</code></p>
<div><pre class="hljs"><code><span class="hljs-attr">version:</span> <span class="hljs-string">"3"</span>

<span class="hljs-attr">services:</span>
  <span class="hljs-attr">app:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">wildwildangel/tiny-ssh-honeypot:edge</span>
    <span class="hljs-attr">container_name:</span> <span class="hljs-string">fakessh</span>
    <span class="hljs-comment"># 为了避免意外退出，设置了自动重启</span>
    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>
    <span class="hljs-comment"># 这个容器不需要特权</span>
    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">false</span>
    <span class="hljs-comment">#推荐限制一下该容器的cpu使用率（防止攻击者发起dos或者dos攻击，毕竟握手包是需要有加密解密参与的，属于运算密集场景），避免cpu占用过高导致资源不可用，这边的设置相当于最多只使用'50%'的cpu资源</span>
    <span class="hljs-attr">cpu_quota:</span> <span class="hljs-number">1000</span>
    <span class="hljs-attr">cpu_period:</span> <span class="hljs-number">2000</span>
    <span class="hljs-comment">#这边的cpu_count根据实际情况决定</span>
    <span class="hljs-attr">cpu_count:</span> <span class="hljs-number">2</span>
    <span class="hljs-comment"># 注意这里的参数，两个`-b`指定了监听地址，`-p`指定了监听端口，`--host-key`这个接下来会说到</span>
    <span class="hljs-attr">command:</span> [<span class="hljs-string">"-b"</span>,<span class="hljs-string">"::"</span>,<span class="hljs-string">"-b"</span>,<span class="hljs-string">"0.0.0.0"</span>,<span class="hljs-string">"-p"</span>,<span class="hljs-string">"8022"</span>,<span class="hljs-string">"--host-key"</span>,<span class="hljs-string">"/data/ssh-honeypot/keys/id_ed25519"</span>]
    <span class="hljs-comment"># 我这边给的host网络，这个配合fail2ban会比较容易一些，否则要手动添加action去创建nat表的item才能端口重定向</span>
    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">host</span>
    <span class="hljs-comment"># 常用的环境变量</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">LANG=en_US.UTF-8</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/ssh-honeypot:/data/ssh-honeypot</span>
    <span class="hljs-attr">tmpfs:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">/tmp:exec,nosuid,nodev,size=2G</span>
    <span class="hljs-attr">logging:</span>
      <span class="hljs-comment"># 为了可以直接在系统日志中看到fakessh的日志，这边直接将日志也输出到syslog中</span>
      <span class="hljs-attr">driver:</span> <span class="hljs-string">syslog</span>
      <span class="hljs-comment"># https://docs.docker.com/config/containers/logging/syslog/</span>
      <span class="hljs-attr">options:</span>
        <span class="hljs-attr">syslog-address:</span> <span class="hljs-string">"udp://localhost:514"</span></code></pre></div>
<p>说一下<code>--host-key</code>参数，在我们第一次登录到一个<code>ssh</code>主机时会有一个提示信息，指示了<code>ssh</code>主机的指纹信息。所以，如果不指定这个参数，密码爆破的攻击者在被重定向到新端口后，就会收到<code>ssh</code>客户端提示，主机的指纹变了。所以，如果是处理的比较精细的攻击者，是可以通过该行为判断出来，自己已经被重定向了。于是，就可以停止继续爆破，或者跟换ip地址进行爆破。然而，指定了这个参数后，对于攻击者来说，是察觉不出来，自己的登录请求已经进入<code>honeypot</code>进行处理了。</p>
<h4 id="按照如上所示配置完成后">按照如上所示配置完成后。</h4>
<ul>
<li>=&gt; 攻击者发起密码爆破</li>
<li>=&gt; 请求由<code>sshd</code>进行处理</li>
<li>=&gt; 失败超过指定次数</li>
<li>=&gt; <code>fail2ban</code>将请求重定向到<code>honeypot</code></li>
<li>=&gt; 攻击者接下来尝试的所有密码都将被记录并且永远是登录失败。</li>
</ul>
<h4 id="最后贴一段最近抓取到的密码爆破记录docker-compose-logs-f-grep-login-attempt-for-user">最后贴一段最近抓取到的密码爆破记录<code>docker-compose logs -f |grep 'login attempt for user:'</code></h4>
<div><pre class="hljs"><code>2024-08-17 00:02:19 tiny-ssh-honeypot: [120.26.121.171:45426 =&gt; 172.16.0.1:22]: login attempt for user: root (password: abcd12345)
2024-08-17 00:02:22 tiny-ssh-honeypot: [120.26.121.171:40580 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1q2w3e4r?)
2024-08-17 00:02:26 tiny-ssh-honeypot: [120.26.121.171:40582 =&gt; 172.16.0.1:22]: login attempt for user: root (password: kakashka)
2024-08-17 00:02:26 tiny-ssh-honeypot: [192.109.206.13:41464 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure66666)
2024-08-17 00:02:29 tiny-ssh-honeypot: [120.26.121.171:40586 =&gt; 172.16.0.1:22]: login attempt for user: root (password: asdasdasd)
2024-08-17 00:02:32 tiny-ssh-honeypot: [120.26.121.171:48980 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Wz123456)
2024-08-17 00:02:33 tiny-ssh-honeypot: [192.109.206.13:42812 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure666666)
2024-08-17 00:02:35 tiny-ssh-honeypot: [120.26.121.171:48988 =&gt; 172.16.0.1:22]: login attempt for user: root (password: S0f1a007!)
2024-08-17 00:02:38 tiny-ssh-honeypot: [120.26.121.171:49000 =&gt; 172.16.0.1:22]: login attempt for user: root (password: alexander)
2024-08-17 00:02:40 tiny-ssh-honeypot: [192.109.206.13:44160 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure6666666)
2024-08-17 00:02:41 tiny-ssh-honeypot: [120.26.121.171:41726 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 8R!ghTs!d3@123)
2024-08-17 00:02:44 tiny-ssh-honeypot: [120.26.121.171:41742 =&gt; 172.16.0.1:22]: login attempt for user: root (password: #EDC2wsx1qaz)
2024-08-17 00:02:47 tiny-ssh-honeypot: [192.109.206.13:45508 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure66666666)
2024-08-17 00:02:47 tiny-ssh-honeypot: [120.26.121.171:41754 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Az123456)
2024-08-17 00:02:51 tiny-ssh-honeypot: [120.26.121.171:58158 =&gt; 172.16.0.1:22]: login attempt for user: root (password: test_1234)
2024-08-17 00:02:54 tiny-ssh-honeypot: [120.26.121.171:58170 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 741852)
2024-08-17 00:02:54 tiny-ssh-honeypot: [192.109.206.13:46856 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure8888)
2024-08-17 00:02:57 tiny-ssh-honeypot: [120.26.121.171:58176 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Ab123456!)
2024-08-17 00:03:01 tiny-ssh-honeypot: [120.26.121.171:50416 =&gt; 172.16.0.1:22]: login attempt for user: root (password: aaaAAA111)
2024-08-17 00:03:02 tiny-ssh-honeypot: [192.109.206.13:48204 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure88888)
2024-08-17 00:03:04 tiny-ssh-honeypot: [120.26.121.171:50420 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Salam@123)
2024-08-17 00:03:07 tiny-ssh-honeypot: [120.26.121.171:50426 =&gt; 172.16.0.1:22]: login attempt for user: root (password: asdzxc123)
2024-08-17 00:03:10 tiny-ssh-honeypot: [120.26.121.171:57214 =&gt; 172.16.0.1:22]: login attempt for user: root (password: QWer!@34)
2024-08-17 00:03:11 tiny-ssh-honeypot: [192.109.206.13:49552 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure888888)
2024-08-17 00:03:13 tiny-ssh-honeypot: [120.26.121.171:57226 =&gt; 172.16.0.1:22]: login attempt for user: root (password: rootme)
2024-08-17 00:03:16 tiny-ssh-honeypot: [192.109.206.13:50900 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure8888888)
2024-08-17 00:03:17 tiny-ssh-honeypot: [120.26.121.171:57238 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1qaz2wsx3edc)
2024-08-17 00:03:20 tiny-ssh-honeypot: [120.26.121.171:55384 =&gt; 172.16.0.1:22]: login attempt for user: root (password: rahasia123)
2024-08-17 00:03:23 tiny-ssh-honeypot: [120.26.121.171:55390 =&gt; 172.16.0.1:22]: login attempt for user: root (password: meiyou)
2024-08-17 00:03:24 tiny-ssh-honeypot: [192.109.206.13:52248 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure88888888)
2024-08-17 00:03:26 tiny-ssh-honeypot: [120.26.121.171:55394 =&gt; 172.16.0.1:22]: login attempt for user: root (password: dev)
2024-08-17 00:03:30 tiny-ssh-honeypot: [120.26.121.171:55404 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Jj123456)
2024-08-17 00:03:31 tiny-ssh-honeypot: [192.109.206.13:53596 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure9999)
2024-08-17 00:03:33 tiny-ssh-honeypot: [120.26.121.171:55028 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 192837465)
2024-08-17 00:03:36 tiny-ssh-honeypot: [120.26.121.171:55030 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1qaz3edc)
2024-08-17 00:03:38 tiny-ssh-honeypot: [192.109.206.13:54944 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure99999)
2024-08-17 00:03:40 tiny-ssh-honeypot: [120.26.121.171:55034 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Aabb1234)
2024-08-17 00:03:43 tiny-ssh-honeypot: [120.26.121.171:32906 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Zaq12wsx)
2024-08-17 00:03:46 tiny-ssh-honeypot: [192.109.206.13:56292 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure999999)
2024-08-17 00:03:46 tiny-ssh-honeypot: [120.26.121.171:32920 =&gt; 172.16.0.1:22]: login attempt for user: root (password: wangwang)
2024-08-17 00:03:50 tiny-ssh-honeypot: [120.26.121.171:32922 =&gt; 172.16.0.1:22]: login attempt for user: root (password: !@#QWEasdzxc)
2024-08-17 00:03:53 tiny-ssh-honeypot: [120.26.121.171:49870 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qqq123...)
2024-08-17 00:03:53 tiny-ssh-honeypot: [192.109.206.13:57640 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure9999999)
2024-08-17 00:03:56 tiny-ssh-honeypot: [120.26.121.171:49886 =&gt; 172.16.0.1:22]: login attempt for user: root (password: !Password)
2024-08-17 00:04:00 tiny-ssh-honeypot: [120.26.121.171:49900 =&gt; 172.16.0.1:22]: login attempt for user: root (password: P@ss1234)
2024-08-17 00:04:00 tiny-ssh-honeypot: [192.109.206.13:58988 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Azure99999999)
2024-08-17 00:04:03 tiny-ssh-honeypot: [120.26.121.171:58396 =&gt; 172.16.0.1:22]: login attempt for user: root (password: panasonic)
2024-08-17 00:04:06 tiny-ssh-honeypot: [120.26.121.171:58400 =&gt; 172.16.0.1:22]: login attempt for user: root (password: changeme12)
2024-08-17 00:04:09 tiny-ssh-honeypot: [192.109.206.13:60336 =&gt; 172.16.0.1:22]: login attempt for user: root (password: azureuser)
2024-08-17 00:04:10 tiny-ssh-honeypot: [120.26.121.171:58412 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Slave@123)
2024-08-17 00:04:13 tiny-ssh-honeypot: [120.26.121.171:47070 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1@admin)
2024-08-17 00:04:15 tiny-ssh-honeypot: [192.109.206.13:33452 =&gt; 172.16.0.1:22]: login attempt for user: root (password: B2@fK0@dC3%h)
2024-08-17 00:04:16 tiny-ssh-honeypot: [120.26.121.171:47086 =&gt; 172.16.0.1:22]: login attempt for user: root (password: pwd@1234)
2024-08-17 00:04:19 tiny-ssh-honeypot: [120.26.121.171:47096 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qwe12345678)
2024-08-17 00:04:22 tiny-ssh-honeypot: [120.26.121.171:41082 =&gt; 172.16.0.1:22]: login attempt for user: root (password: secret)
2024-08-17 00:04:23 tiny-ssh-honeypot: [192.109.206.13:34800 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Ba123456@)
2024-08-17 00:04:25 tiny-ssh-honeypot: [120.26.121.171:41090 =&gt; 172.16.0.1:22]: login attempt for user: root (password: P@ssw0rd12345)
2024-08-17 00:04:28 tiny-ssh-honeypot: [120.26.121.171:41092 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1q2w3e4r@)
2024-08-17 00:04:31 tiny-ssh-honeypot: [120.26.121.171:50778 =&gt; 172.16.0.1:22]: login attempt for user: root (password: vs123456)
2024-08-17 00:04:32 tiny-ssh-honeypot: [192.109.206.13:36148 =&gt; 172.16.0.1:22]: login attempt for user: root (password: backup@2022)
2024-08-17 00:04:35 tiny-ssh-honeypot: [120.26.121.171:50784 =&gt; 172.16.0.1:22]: login attempt for user: root (password: password123456789)
2024-08-17 00:04:37 tiny-ssh-honeypot: [192.109.206.13:37496 =&gt; 172.16.0.1:22]: login attempt for user: root (password: backup@2023)
2024-08-17 00:04:38 tiny-ssh-honeypot: [120.26.121.171:50788 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bagabu)
2024-08-17 00:04:41 tiny-ssh-honeypot: [120.26.121.171:48968 =&gt; 172.16.0.1:22]: login attempt for user: root (password: admin.123)
2024-08-17 00:04:44 tiny-ssh-honeypot: [120.26.121.171:48972 =&gt; 172.16.0.1:22]: login attempt for user: root (password: xiaokang)
2024-08-17 00:04:45 tiny-ssh-honeypot: [192.109.206.13:38844 =&gt; 172.16.0.1:22]: login attempt for user: root (password: backup@2024)
2024-08-17 00:04:48 tiny-ssh-honeypot: [120.26.121.171:48978 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Windows@2024)
2024-08-17 00:04:51 tiny-ssh-honeypot: [120.26.121.171:36530 =&gt; 172.16.0.1:22]: login attempt for user: root (password: !QAZxsw23edc)
2024-08-17 00:04:53 tiny-ssh-honeypot: [192.109.206.13:40192 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bagabu)
2024-08-17 00:04:55 tiny-ssh-honeypot: [120.26.121.171:36540 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Test_123456)
2024-08-17 00:04:59 tiny-ssh-honeypot: [120.26.121.171:36546 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Ga123456.)
2024-08-17 00:04:59 tiny-ssh-honeypot: [192.109.206.13:41540 =&gt; 172.16.0.1:22]: login attempt for user: root (password: baidu123)
2024-08-17 00:05:02 tiny-ssh-honeypot: [120.26.121.171:41790 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Test@2023)
2024-08-17 00:05:06 tiny-ssh-honeypot: [120.26.121.171:41794 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 19901005Re13!)
2024-08-17 00:05:06 tiny-ssh-honeypot: [192.109.206.13:42888 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Baidu@123)
2024-08-17 00:05:09 tiny-ssh-honeypot: [120.26.121.171:41808 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Root123..)
2024-08-17 00:05:12 tiny-ssh-honeypot: [120.26.121.171:36188 =&gt; 172.16.0.1:22]: login attempt for user: root (password: mercury)
2024-08-17 00:05:14 tiny-ssh-honeypot: [192.109.206.13:44236 =&gt; 172.16.0.1:22]: login attempt for user: root (password: baidu@123)
2024-08-17 00:05:15 tiny-ssh-honeypot: [120.26.121.171:36200 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qwerty123#)
2024-08-17 00:05:18 tiny-ssh-honeypot: [120.26.121.171:36210 =&gt; 172.16.0.1:22]: login attempt for user: root (password: @a123456)
2024-08-17 00:05:21 tiny-ssh-honeypot: [192.109.206.13:45584 =&gt; 172.16.0.1:22]: login attempt for user: root (password: baison)
2024-08-17 00:05:22 tiny-ssh-honeypot: [120.26.121.171:49336 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qwer123$)
2024-08-17 00:05:25 tiny-ssh-honeypot: [120.26.121.171:49338 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qweasdzxc123!@#)
2024-08-17 00:05:28 tiny-ssh-honeypot: [120.26.121.171:49344 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Aa!123456)
2024-08-17 00:05:29 tiny-ssh-honeypot: [192.109.206.13:46932 =&gt; 172.16.0.1:22]: login attempt for user: root (password: banana)
2024-08-17 00:05:31 tiny-ssh-honeypot: [120.26.121.171:52790 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 22222222)
2024-08-17 00:05:35 tiny-ssh-honeypot: [120.26.121.171:52796 =&gt; 172.16.0.1:22]: login attempt for user: root (password: python)
2024-08-17 00:05:36 tiny-ssh-honeypot: [192.109.206.13:48280 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bananapi)
2024-08-17 00:05:38 tiny-ssh-honeypot: [120.26.121.171:52798 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Google.com)
2024-08-17 00:05:41 tiny-ssh-honeypot: [120.26.121.171:44110 =&gt; 172.16.0.1:22]: login attempt for user: root (password: aA!123456)
2024-08-17 00:05:43 tiny-ssh-honeypot: [192.109.206.13:49628 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bandung)
2024-08-17 00:05:44 tiny-ssh-honeypot: [120.26.121.171:44120 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Jp123456)
2024-08-17 00:05:47 tiny-ssh-honeypot: [120.26.121.171:44134 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qaz@1234)
2024-08-17 00:05:50 tiny-ssh-honeypot: [192.109.206.13:50976 =&gt; 172.16.0.1:22]: login attempt for user: root (password: batman)
2024-08-17 00:05:50 tiny-ssh-honeypot: [120.26.121.171:59080 =&gt; 172.16.0.1:22]: login attempt for user: root (password: install123)
2024-08-17 00:05:54 tiny-ssh-honeypot: [120.26.121.171:59082 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Password1234)
2024-08-17 00:05:57 tiny-ssh-honeypot: [192.109.206.13:52324 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bawodu)
2024-08-17 00:05:57 tiny-ssh-honeypot: [120.26.121.171:59098 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Cx123456)
2024-08-17 00:06:01 tiny-ssh-honeypot: [120.26.121.171:55466 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qaz@123!)
2024-08-17 00:06:04 tiny-ssh-honeypot: [120.26.121.171:55470 =&gt; 172.16.0.1:22]: login attempt for user: root (password: wzdxidc123!@#)
2024-08-17 00:06:05 tiny-ssh-honeypot: [192.109.206.13:53672 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bb112211)
2024-08-17 00:06:07 tiny-ssh-honeypot: [120.26.121.171:55476 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Abc!@#456)
2024-08-17 00:06:10 tiny-ssh-honeypot: [120.26.121.171:55490 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qqqqqqq1)
2024-08-17 00:06:13 tiny-ssh-honeypot: [192.109.206.13:55020 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bb123456)
2024-08-17 00:06:13 tiny-ssh-honeypot: [120.26.121.171:49266 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123456@a)
2024-08-17 00:06:16 tiny-ssh-honeypot: [120.26.121.171:49282 =&gt; 172.16.0.1:22]: login attempt for user: root (password: nagiosxi)
2024-08-17 00:06:19 tiny-ssh-honeypot: [120.26.121.171:49288 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Aa111222)
2024-08-17 00:06:21 tiny-ssh-honeypot: [192.109.206.13:56368 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bb123456!)
2024-08-17 00:06:22 tiny-ssh-honeypot: [120.26.121.171:55504 =&gt; 172.16.0.1:22]: login attempt for user: root (password: zdsoft2020@winupon.com)
2024-08-17 00:06:26 tiny-ssh-honeypot: [120.26.121.171:55516 =&gt; 172.16.0.1:22]: login attempt for user: root (password: AAAbbb123456)
2024-08-17 00:06:27 tiny-ssh-honeypot: [192.109.206.13:57716 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bb@147258)
2024-08-17 00:06:29 tiny-ssh-honeypot: [120.26.121.171:55532 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Pa$$word)
2024-08-17 00:06:32 tiny-ssh-honeypot: [120.26.121.171:39134 =&gt; 172.16.0.1:22]: login attempt for user: root (password: electric)
2024-08-17 00:06:35 tiny-ssh-honeypot: [120.26.121.171:39150 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Rm123456)
2024-08-17 00:06:35 tiny-ssh-honeypot: [192.109.206.13:59064 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bd2020@)!$0518)
2024-08-17 00:06:39 tiny-ssh-honeypot: [120.26.121.171:39164 =&gt; 172.16.0.1:22]: login attempt for user: root (password: !QAZxsw2#EDCvfr4)
2024-08-17 00:06:42 tiny-ssh-honeypot: [120.26.121.171:39586 =&gt; 172.16.0.1:22]: login attempt for user: root (password: abc123456@)
2024-08-17 00:06:43 tiny-ssh-honeypot: [192.109.206.13:60412 =&gt; 172.16.0.1:22]: login attempt for user: root (password: beijing2008)
2024-08-17 00:06:46 tiny-ssh-honeypot: [120.26.121.171:39598 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qazwsx456)
2024-08-17 00:06:48 tiny-ssh-honeypot: [192.109.206.13:33528 =&gt; 172.16.0.1:22]: login attempt for user: root (password: beijing@123)
2024-08-17 00:06:49 tiny-ssh-honeypot: [120.26.121.171:39608 =&gt; 172.16.0.1:22]: login attempt for user: root (password: vk@123456)
2024-08-17 00:06:52 tiny-ssh-honeypot: [120.26.121.171:52184 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1qaz@2WSX)
2024-08-17 00:06:57 tiny-ssh-honeypot: [120.26.121.171:52192 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Pc123456)
2024-08-17 00:06:57 tiny-ssh-honeypot: [192.109.206.13:34876 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Berbidvps.ir)
2024-08-17 00:07:00 tiny-ssh-honeypot: [120.26.121.171:45966 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Mima@2024)
2024-08-17 00:07:04 tiny-ssh-honeypot: [120.26.121.171:45968 =&gt; 172.16.0.1:22]: login attempt for user: root (password: password#123)
2024-08-17 00:07:06 tiny-ssh-honeypot: [192.109.206.13:36224 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bf123456)
2024-08-17 00:07:07 tiny-ssh-honeypot: [120.26.121.171:45978 =&gt; 172.16.0.1:22]: login attempt for user: root (password: root-123)
2024-08-17 00:07:11 tiny-ssh-honeypot: [120.26.121.171:37124 =&gt; 172.16.0.1:22]: login attempt for user: root (password: zero)
2024-08-17 00:07:13 tiny-ssh-honeypot: [192.109.206.13:37572 =&gt; 172.16.0.1:22]: login attempt for user: root (password: BFidc!@#456)
2024-08-17 00:07:14 tiny-ssh-honeypot: [120.26.121.171:37134 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123qaz!@#)
2024-08-17 00:07:18 tiny-ssh-honeypot: [120.26.121.171:37146 =&gt; 172.16.0.1:22]: login attempt for user: root (password: user21)
2024-08-17 00:07:18 tiny-ssh-honeypot: [192.109.206.13:38920 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bgj948888)
2024-08-17 00:07:21 tiny-ssh-honeypot: [120.26.121.171:42200 =&gt; 172.16.0.1:22]: login attempt for user: root (password: daniel12)
2024-08-17 00:07:24 tiny-ssh-honeypot: [120.26.121.171:42204 =&gt; 172.16.0.1:22]: login attempt for user: root (password: abc123#@!)
2024-08-17 00:07:25 tiny-ssh-honeypot: [192.109.206.13:40268 =&gt; 172.16.0.1:22]: login attempt for user: root (password: BHRT**56$wx*%*St)
2024-08-17 00:07:27 tiny-ssh-honeypot: [120.26.121.171:42214 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 19890101)
2024-08-17 00:07:32 tiny-ssh-honeypot: [120.26.121.171:41316 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 0RY%GWa^MC34E*Fp1A)
2024-08-17 00:07:32 tiny-ssh-honeypot: [192.109.206.13:41616 =&gt; 172.16.0.1:22]: login attempt for user: root (password: BHU*nji9)
2024-08-17 00:07:35 tiny-ssh-honeypot: [120.26.121.171:41324 =&gt; 172.16.0.1:22]: login attempt for user: root (password: QWEasdzxc123)
2024-08-17 00:07:38 tiny-ssh-honeypot: [120.26.121.171:41328 =&gt; 172.16.0.1:22]: login attempt for user: root (password: @12345678)
2024-08-17 00:07:40 tiny-ssh-honeypot: [192.109.206.13:42964 =&gt; 172.16.0.1:22]: login attempt for user: root (password: birgit)
2024-08-17 00:07:42 tiny-ssh-honeypot: [120.26.121.171:45174 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 4rfv%TGB6yhn)
2024-08-17 00:07:45 tiny-ssh-honeypot: [120.26.121.171:45182 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qwerty123456)
2024-08-17 00:07:48 tiny-ssh-honeypot: [120.26.121.171:45198 =&gt; 172.16.0.1:22]: login attempt for user: root (password: florian1)
2024-08-17 00:07:49 tiny-ssh-honeypot: [192.109.206.13:44312 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bismillah)
2024-08-17 00:07:52 tiny-ssh-honeypot: [120.26.121.171:34622 =&gt; 172.16.0.1:22]: login attempt for user: root (password: www.hao123)
2024-08-17 00:07:55 tiny-ssh-honeypot: [192.109.206.13:45660 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bismillah@123)
2024-08-17 00:07:55 tiny-ssh-honeypot: [120.26.121.171:34626 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 644612Pp)
2024-08-17 00:07:59 tiny-ssh-honeypot: [120.26.121.171:34640 =&gt; 172.16.0.1:22]: login attempt for user: root (password: root@888)
2024-08-17 00:08:02 tiny-ssh-honeypot: [192.109.206.13:47008 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bjdv@2023)
2024-08-17 00:08:02 tiny-ssh-honeypot: [120.26.121.171:37434 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Root2023)
2024-08-17 00:08:05 tiny-ssh-honeypot: [120.26.121.171:37436 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qazqaz)
2024-08-17 00:08:09 tiny-ssh-honeypot: [120.26.121.171:37448 =&gt; 172.16.0.1:22]: login attempt for user: root (password: legend)
2024-08-17 00:08:10 tiny-ssh-honeypot: [192.109.206.13:48356 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Blackberry1)
2024-08-17 00:08:12 tiny-ssh-honeypot: [120.26.121.171:33372 =&gt; 172.16.0.1:22]: login attempt for user: root (password: dell-123)
2024-08-17 00:08:16 tiny-ssh-honeypot: [120.26.121.171:33388 =&gt; 172.16.0.1:22]: login attempt for user: root (password: root!@#123)
2024-08-17 00:08:17 tiny-ssh-honeypot: [192.109.206.13:49704 =&gt; 172.16.0.1:22]: login attempt for user: root (password: blackjack)
2024-08-17 00:08:19 tiny-ssh-honeypot: [120.26.121.171:33398 =&gt; 172.16.0.1:22]: login attempt for user: root (password: igor)
2024-08-17 00:08:22 tiny-ssh-honeypot: [120.26.121.171:59712 =&gt; 172.16.0.1:22]: login attempt for user: root (password: yy123456)
2024-08-17 00:08:25 tiny-ssh-honeypot: [192.109.206.13:51052 =&gt; 172.16.0.1:22]: login attempt for user: root (password: blink182)
2024-08-17 00:08:26 tiny-ssh-honeypot: [120.26.121.171:59716 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Google12345)
2024-08-17 00:08:30 tiny-ssh-honeypot: [120.26.121.171:59724 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Wang1997)
2024-08-17 00:08:32 tiny-ssh-honeypot: [192.109.206.13:52400 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bonjour)
2024-08-17 00:08:33 tiny-ssh-honeypot: [120.26.121.171:42416 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1234567890Aa)
2024-08-17 00:08:36 tiny-ssh-honeypot: [120.26.121.171:42422 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Abcde!@#$%)
2024-08-17 00:08:38 tiny-ssh-honeypot: [192.109.206.13:53748 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bonuscloud2019)
2024-08-17 00:08:40 tiny-ssh-honeypot: [120.26.121.171:42432 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Oracle@123)
2024-08-17 00:08:43 tiny-ssh-honeypot: [120.26.121.171:49592 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123abc,.)
2024-08-17 00:08:46 tiny-ssh-honeypot: [192.109.206.13:55096 =&gt; 172.16.0.1:22]: login attempt for user: root (password: boyun@123)
2024-08-17 00:08:47 tiny-ssh-honeypot: [120.26.121.171:49602 =&gt; 172.16.0.1:22]: login attempt for user: root (password: abcd=1234)
2024-08-17 00:08:50 tiny-ssh-honeypot: [120.26.121.171:59410 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123asd123)
2024-08-17 00:08:53 tiny-ssh-honeypot: [192.109.206.13:56444 =&gt; 172.16.0.1:22]: login attempt for user: root (password: BPBOSD2025@*)
2024-08-17 00:08:54 tiny-ssh-honeypot: [120.26.121.171:59420 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qwe123.com)
2024-08-17 00:08:57 tiny-ssh-honeypot: [120.26.121.171:59430 =&gt; 172.16.0.1:22]: login attempt for user: root (password: abc1234567)
2024-08-17 00:09:01 tiny-ssh-honeypot: [120.26.121.171:42576 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Xp.123456)
2024-08-17 00:09:02 tiny-ssh-honeypot: [192.109.206.13:57792 =&gt; 172.16.0.1:22]: login attempt for user: root (password: BPBOSD888@*)
2024-08-17 00:09:05 tiny-ssh-honeypot: [120.26.121.171:42592 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qwe@123456)
2024-08-17 00:09:08 tiny-ssh-honeypot: [120.26.121.171:42604 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 77585200)
2024-08-17 00:09:09 tiny-ssh-honeypot: [192.109.206.13:59140 =&gt; 172.16.0.1:22]: login attempt for user: root (password: brain)
2024-08-17 00:09:12 tiny-ssh-honeypot: [120.26.121.171:45368 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 19880203)
2024-08-17 00:09:15 tiny-ssh-honeypot: [120.26.121.171:45376 =&gt; 172.16.0.1:22]: login attempt for user: root (password: testpw)
2024-08-17 00:09:16 tiny-ssh-honeypot: [192.109.206.13:60488 =&gt; 172.16.0.1:22]: login attempt for user: root (password: broadguam1)
2024-08-17 00:09:19 tiny-ssh-honeypot: [120.26.121.171:45392 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qaz123!@#)
2024-08-17 00:09:22 tiny-ssh-honeypot: [120.26.121.171:49492 =&gt; 172.16.0.1:22]: login attempt for user: root (password: global@123)
2024-08-17 00:09:22 tiny-ssh-honeypot: [192.109.206.13:33604 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bss)
2024-08-17 00:09:26 tiny-ssh-honeypot: [120.26.121.171:49504 =&gt; 172.16.0.1:22]: login attempt for user: root (password: system32)
2024-08-17 00:09:30 tiny-ssh-honeypot: [192.109.206.13:34952 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bt123456)
2024-08-17 00:09:30 tiny-ssh-honeypot: [120.26.121.171:49514 =&gt; 172.16.0.1:22]: login attempt for user: root (password: He123456)
2024-08-17 00:09:33 tiny-ssh-honeypot: [120.26.121.171:45010 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 101010)
2024-08-17 00:09:36 tiny-ssh-honeypot: [120.26.121.171:45012 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123459)
2024-08-17 00:09:38 tiny-ssh-honeypot: [192.109.206.13:36300 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bt@123456)
2024-08-17 00:09:40 tiny-ssh-honeypot: [120.26.121.171:45026 =&gt; 172.16.0.1:22]: login attempt for user: root (password: q1q1q1q1q1)
2024-08-17 00:09:43 tiny-ssh-honeypot: [120.26.121.171:57526 =&gt; 172.16.0.1:22]: login attempt for user: root (password: sq123!@#)
2024-08-17 00:09:45 tiny-ssh-honeypot: [192.109.206.13:37648 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bubu1986)
2024-08-17 00:09:47 tiny-ssh-honeypot: [120.26.121.171:57538 =&gt; 172.16.0.1:22]: login attempt for user: root (password: P@ssword!)
2024-08-17 00:09:51 tiny-ssh-honeypot: [120.26.121.171:57250 =&gt; 172.16.0.1:22]: login attempt for user: root (password: chenjian)
2024-08-17 00:09:53 tiny-ssh-honeypot: [192.109.206.13:38996 =&gt; 172.16.0.1:22]: login attempt for user: root (password: bugaosuni)
2024-08-17 00:09:54 tiny-ssh-honeypot: [120.26.121.171:57266 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qaz123WSX)
2024-08-17 00:09:57 tiny-ssh-honeypot: [120.26.121.171:57272 =&gt; 172.16.0.1:22]: login attempt for user: root (password: razor)
2024-08-17 00:10:01 tiny-ssh-honeypot: [192.109.206.13:40344 =&gt; 172.16.0.1:22]: login attempt for user: root (password: butterfly)
2024-08-17 00:10:02 tiny-ssh-honeypot: [120.26.121.171:47996 =&gt; 172.16.0.1:22]: login attempt for user: root (password: butterfly)
2024-08-17 00:10:05 tiny-ssh-honeypot: [120.26.121.171:47998 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Ubuntu@2023)
2024-08-17 00:10:08 tiny-ssh-honeypot: [120.26.121.171:48000 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qazxsw1234)
2024-08-17 00:10:09 tiny-ssh-honeypot: [192.109.206.13:41692 =&gt; 172.16.0.1:22]: login attempt for user: root (password: buzhidao)
2024-08-17 00:10:12 tiny-ssh-honeypot: [120.26.121.171:50768 =&gt; 172.16.0.1:22]: login attempt for user: root (password: admin2018)
2024-08-17 00:10:14 tiny-ssh-honeypot: [192.109.206.13:43040 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Buzz0ff123)
2024-08-17 00:10:15 tiny-ssh-honeypot: [120.26.121.171:50780 =&gt; 172.16.0.1:22]: login attempt for user: root (password: vps12)
2024-08-17 00:10:18 tiny-ssh-honeypot: [120.26.121.171:50782 =&gt; 172.16.0.1:22]: login attempt for user: root (password: tang)
2024-08-17 00:10:22 tiny-ssh-honeypot: [120.26.121.171:59158 =&gt; 172.16.0.1:22]: login attempt for user: root (password: root2023!)
2024-08-17 00:10:22 tiny-ssh-honeypot: [192.109.206.13:44388 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Bx123456)
2024-08-17 00:10:25 tiny-ssh-honeypot: [120.26.121.171:59174 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Cloud1234)
2024-08-17 00:10:28 tiny-ssh-honeypot: [120.26.121.171:59180 =&gt; 172.16.0.1:22]: login attempt for user: root (password: magnum)
2024-08-17 00:10:29 tiny-ssh-honeypot: [192.109.206.13:45736 =&gt; 172.16.0.1:22]: login attempt for user: root (password: c0mpl#x)
2024-08-17 00:10:32 tiny-ssh-honeypot: [120.26.121.171:46102 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 12345678a!)
2024-08-17 00:10:35 tiny-ssh-honeypot: [120.26.121.171:46114 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qQ123456)
2024-08-17 00:10:36 tiny-ssh-honeypot: [192.109.206.13:47084 =&gt; 172.16.0.1:22]: login attempt for user: root (password: c9p5au8naa)
2024-08-17 00:10:39 tiny-ssh-honeypot: [120.26.121.171:46124 =&gt; 172.16.0.1:22]: login attempt for user: root (password: aA12345678)
2024-08-17 00:10:43 tiny-ssh-honeypot: [120.26.121.171:43020 =&gt; 172.16.0.1:22]: login attempt for user: root (password: matrix)
2024-08-17 00:10:43 tiny-ssh-honeypot: [192.109.206.13:48432 =&gt; 172.16.0.1:22]: login attempt for user: root (password: CactiEZ)
2024-08-17 00:10:46 tiny-ssh-honeypot: [120.26.121.171:43026 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 123456qaZ)
2024-08-17 00:10:49 tiny-ssh-honeypot: [120.26.121.171:43028 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Power:Asdasdbgt)
2024-08-17 00:10:51 tiny-ssh-honeypot: [192.109.206.13:49780 =&gt; 172.16.0.1:22]: login attempt for user: root (password: cactifans.org)
2024-08-17 00:10:53 tiny-ssh-honeypot: [120.26.121.171:44392 =&gt; 172.16.0.1:22]: login attempt for user: root (password: pass@123)
2024-08-17 00:10:56 tiny-ssh-honeypot: [120.26.121.171:44404 =&gt; 172.16.0.1:22]: login attempt for user: root (password: killer123)
2024-08-17 00:10:58 tiny-ssh-honeypot: [192.109.206.13:51128 =&gt; 172.16.0.1:22]: login attempt for user: root (password: calvin)
2024-08-17 00:11:00 tiny-ssh-honeypot: [120.26.121.171:44414 =&gt; 172.16.0.1:22]: login attempt for user: root (password: senha)
2024-08-17 00:11:04 tiny-ssh-honeypot: [120.26.121.171:37840 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Server2016)
2024-08-17 00:11:05 tiny-ssh-honeypot: [192.109.206.13:52476 =&gt; 172.16.0.1:22]: login attempt for user: root (password: caonima)
2024-08-17 00:11:07 tiny-ssh-honeypot: [120.26.121.171:37854 =&gt; 172.16.0.1:22]: login attempt for user: root (password: su198671@)
2024-08-17 00:11:10 tiny-ssh-honeypot: [120.26.121.171:34634 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 1Qaz2wsx)
2024-08-17 00:11:14 tiny-ssh-honeypot: [120.26.121.171:34638 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Login123!)
2024-08-17 00:11:15 tiny-ssh-honeypot: [192.109.206.13:53824 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Caonima123)
2024-08-17 00:11:17 tiny-ssh-honeypot: [120.26.121.171:34642 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Qwerasdf123)
2024-08-17 00:11:20 tiny-ssh-honeypot: [192.109.206.13:55172 =&gt; 172.16.0.1:22]: login attempt for user: root (password: carlos123)
2024-08-17 00:11:20 tiny-ssh-honeypot: [120.26.121.171:46682 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Abc#1234)
2024-08-17 00:11:24 tiny-ssh-honeypot: [120.26.121.171:46698 =&gt; 172.16.0.1:22]: login attempt for user: root (password: google123)
2024-08-17 00:11:27 tiny-ssh-honeypot: [192.109.206.13:56520 =&gt; 172.16.0.1:22]: login attempt for user: root (password: cartorio)
2024-08-17 00:11:27 tiny-ssh-honeypot: [120.26.121.171:46704 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 12345@Qwert)
2024-08-17 00:11:31 tiny-ssh-honeypot: [120.26.121.171:59374 =&gt; 172.16.0.1:22]: login attempt for user: root (password: t00r)
2024-08-17 00:11:34 tiny-ssh-honeypot: [120.26.121.171:59386 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Xu123456)
2024-08-17 00:11:36 tiny-ssh-honeypot: [192.109.206.13:57868 =&gt; 172.16.0.1:22]: login attempt for user: root (password: casa)
2024-08-17 00:11:38 tiny-ssh-honeypot: [120.26.121.171:59392 =&gt; 172.16.0.1:22]: login attempt for user: root (password: zZ123456)
2024-08-17 00:11:41 tiny-ssh-honeypot: [120.26.121.171:51996 =&gt; 172.16.0.1:22]: login attempt for user: root (password: temporal)
2024-08-17 00:11:42 tiny-ssh-honeypot: [192.109.206.13:59216 =&gt; 172.16.0.1:22]: login attempt for user: root (password: casa123)
2024-08-17 00:11:44 tiny-ssh-honeypot: [120.26.121.171:52012 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qwerty11)
2024-08-17 00:11:48 tiny-ssh-honeypot: [120.26.121.171:52020 =&gt; 172.16.0.1:22]: login attempt for user: root (password: 19890613)
2024-08-17 00:11:49 tiny-ssh-honeypot: [192.109.206.13:60564 =&gt; 172.16.0.1:22]: login attempt for user: root (password: casper)
2024-08-17 00:11:51 tiny-ssh-honeypot: [120.26.121.171:52948 =&gt; 172.16.0.1:22]: login attempt for user: root (password: asd123321)
2024-08-17 00:11:55 tiny-ssh-honeypot: [120.26.121.171:52950 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Yhsj_Bz@2022)
2024-08-17 00:11:56 tiny-ssh-honeypot: [192.109.206.13:33680 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Cc123456.)
2024-08-17 00:11:59 tiny-ssh-honeypot: [120.26.121.171:52964 =&gt; 172.16.0.1:22]: login attempt for user: root (password: qweasd@123)
2024-08-17 00:12:02 tiny-ssh-honeypot: [120.26.121.171:46010 =&gt; 172.16.0.1:22]: login attempt for user: root (password: woaini520)
2024-08-17 00:12:04 tiny-ssh-honeypot: [192.109.206.13:35028 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Cd123456)
2024-08-17 00:12:05 tiny-ssh-honeypot: [120.26.121.171:46026 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Sj123456!)
2024-08-17 00:12:08 tiny-ssh-honeypot: [120.26.121.171:46040 =&gt; 172.16.0.1:22]: login attempt for user: root (password: tc123456)
2024-08-17 00:12:11 tiny-ssh-honeypot: [192.109.206.13:36376 =&gt; 172.16.0.1:22]: login attempt for user: root (password: cde3CDE#vfr4)
2024-08-17 00:12:12 tiny-ssh-honeypot: [120.26.121.171:57978 =&gt; 172.16.0.1:22]: login attempt for user: root (password: AAbbcc123)
2024-08-17 00:12:15 tiny-ssh-honeypot: [120.26.121.171:57990 =&gt; 172.16.0.1:22]: login attempt for user: root (password: !Aa123456)
2024-08-17 00:12:19 tiny-ssh-honeypot: [120.26.121.171:58004 =&gt; 172.16.0.1:22]: login attempt for user: root (password: ubuntu2019)
2024-08-17 00:12:20 tiny-ssh-honeypot: [192.109.206.13:37724 =&gt; 172.16.0.1:22]: login attempt for user: root (password: cdnjiasu@886699)
2024-08-17 00:12:22 tiny-ssh-honeypot: [120.26.121.171:51380 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Yi123456)
2024-08-17 00:12:26 tiny-ssh-honeypot: [120.26.121.171:51386 =&gt; 172.16.0.1:22]: login attempt for user: root (password: Al123456.)
2024-08-17 00:12:28 tiny-ssh-honeypot: [192.109.206.13:39072 =&gt; 172.16.0.1:22]: login attempt for user: root (password: CDtianrun888)</code></pre></div>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[自尊发展的三个阶段：条件自尊、独立型自尊、无条件自尊]]></title>
            <guid>824c72c473364fb5a96bd8d9fb5a06c0</guid>
            <pubDate>Mon, 12 Aug 2024 23:35:54 GMT</pubDate>
            <content:encoded><![CDATA[<p>美国心理学家泰勒·本·沙哈尔，将自尊的成长分为三个阶段：</p>
<h2 id="第一阶段依赖型自尊条件自尊">第一阶段：依赖型自尊（条件自尊）</h2>
<p>指的是依赖他人肯定和表扬而产生的自尊，把生活的动力归结于他人的看法。<br />
比如，就业时，会倾向高名望、高地位的工作；选择伴侣时，主要考虑别人是否肯定、是否喜欢。</p>
<h2 id="第二阶段独立型自尊">第二阶段：独立型自尊</h2>
<p>指的是不依靠他人的看法，自我产生的自尊。<br />
对自己的评判，是根据自我的标准，比如，我很清楚自己的学习是否努力、工作是否用心。<br />
尽管别人对此有很多看法，但最终是由自己来衡量的。<br />
这样的人在思考自己能力大小时，不会与他人比较，而是和过去的自己比较。</p>
<h2 id="第三阶段无条件自尊">第三阶段：无条件自尊</h2>
<p>指的是既不依靠他人的看法，也不陷入自我的评判，根本就不需要对自尊进行评价。<br />
比如，写一本书，依赖型自尊较强的人，会和其他书籍进行比较，动力来自他人的赞扬和肯定；<br />
独立型自尊较强的人，满足感来自个人写作水平的进步，由自己来决定书写的好坏；<br />
而无条件自尊较强的人，写书的目的很简单：就是当有好的想法时，希望能用书呈现出来。</p>
<h3 id="第二-第三阶段的自尊并不是轻易就能达到的境界是一个需要时间-精力自我有意识培养从失败中吸取经验的缓慢过程">第二、第三阶段的自尊并不是轻易就能达到的境界，是一个需要时间、精力，自我有意识培养，从失败中吸取经验的缓慢过程。</h3>
]]></content:encoded>
        </item>
    </channel>
</rss>